import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from optimizer import PortfolioOptimizer
import yfinance as yf
from datetime import datetime, timedelta
from scipy import stats
import requests
import importlib.util
import sys
import os
import tempfile

@st.cache_data(ttl=3600)  # Cache por 1 hora
def load_optimizer_from_private_repo():
    """
    Carrega optimizer.py do reposit√≥rio privado
    """
    try:
        # Configura√ß√µes do reposit√≥rio privado
        GITHUB_USER = "psrs2000"  # Seu usu√°rio
        PRIVATE_REPO = "Portfolio_Optimizer_PVT"  # Nome do repo privado
        GITHUB_TOKEN = st.secrets.get("GITHUB_TOKEN", "")  # Token do GitHub
        
        if not GITHUB_TOKEN:
            st.error("‚ùå Token do GitHub n√£o configurado!")
            st.info("Configure GITHUB_TOKEN nas secrets do Streamlit")
            return None
        
        # URL da API do GitHub para buscar o arquivo
        url = f"https://api.github.com/repos/{GITHUB_USER}/{PRIVATE_REPO}/contents/optimizer.py"
        
        # Headers com autentica√ß√£o
        headers = {
            "Authorization": f"token {GITHUB_TOKEN}",
            "Accept": "application/vnd.github.v3.raw"
        }
        
        # Fazer requisi√ß√£o
        with st.spinner("üîÑ Carregando optimizer do reposit√≥rio privado..."):
            response = requests.get(url, headers=headers, timeout=30)
        
        if response.status_code == 200:
            # C√≥digo baixado com sucesso
            optimizer_code = response.text
            
            # Criar arquivo tempor√°rio
            with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as temp_file:
                temp_file.write(optimizer_code)
                temp_path = temp_file.name
            
            # Importar dinamicamente
            spec = importlib.util.spec_from_file_location("optimizer", temp_path)
            optimizer_module = importlib.util.module_from_spec(spec)
            sys.modules["optimizer"] = optimizer_module
            spec.loader.exec_module(optimizer_module)
            
            # Limpar arquivo tempor√°rio
            os.unlink(temp_path)
            
            st.success("‚úÖ Optimizer carregado do reposit√≥rio privado!")
            return optimizer_module.PortfolioOptimizer
            
        elif response.status_code == 404:
            st.error("‚ùå Arquivo optimizer.py n√£o encontrado no reposit√≥rio privado")
            st.info("Verifique se o arquivo existe em Portfolio_Optimizer_PVT/optimizer.py")
            return None
            
        elif response.status_code == 401:
            st.error("‚ùå Token do GitHub inv√°lido ou sem permiss√£o")
            st.info("Verifique se o token tem acesso ao reposit√≥rio privado")
            return None
            
        else:
            st.error(f"‚ùå Erro ao acessar reposit√≥rio: {response.status_code}")
            st.info(f"Mensagem: {response.text}")
            return None
            
    except requests.exceptions.Timeout:
        st.error("‚ùå Timeout ao carregar optimizer (>30s)")
        return None
        
    except requests.exceptions.ConnectionError:
        st.error("‚ùå Erro de conex√£o com GitHub")
        return None
        
    except Exception as e:
        st.error(f"‚ùå Erro inesperado: {str(e)}")
        return None

# Tentar carregar o optimizer
PortfolioOptimizer = load_optimizer_from_private_repo()

# Se falhou, parar a execu√ß√£o
if PortfolioOptimizer is None:
    st.markdown("---")
    st.markdown("### üîß Configura√ß√£o necess√°ria:")
    st.markdown("""
    1. **Criar Personal Access Token no GitHub:**
       - V√° em: Settings > Developer settings > Personal access tokens
       - Clique em "Generate new token (classic)"
       - Marque: `repo` (acesso completo aos reposit√≥rios)
       
    2. **Configurar token no Streamlit:**
       - No Streamlit Cloud: Settings > Secrets
       - Adicionar linha: `GITHUB_TOKEN = "seu_token_aqui"`
       
    3. **Verificar reposit√≥rio privado:**
       - Nome: `Portfolio_Optimizer_PVT`
       - Arquivo: `optimizer.py` na raiz
    """)
    st.stop()

# =============================================================================
# FUN√á√ïES PARA RANKING DE ATIVOS (NOVO!)
# =============================================================================

def calculate_asset_ranking(df_base_zero, risk_free_column=None):
    """
    Calcula ranking de ativos baseado em 4 par√¢metros:
    1. R¬≤ (Integral vs Data)
    2. Inclina√ß√£o (Integral vs Data) 
    3. Desvio Padr√£o (Diferen√ßa)
    4. Correla√ß√£o (Integral vs Data)
    
    F√≥rmula: √çndice = (Inclinacao_norm √ó Correla√ß√£o) / [(1 - R¬≤) √ó Desvio_norm]
    """
    try:
        # Identificar colunas
        if 'Data' in df_base_zero.columns:
            df_work = df_base_zero.copy()
            dates_col = pd.to_datetime(df_work['Data'])
            
            # Identificar coluna de refer√™ncia (taxa livre de risco)
            if risk_free_column and risk_free_column in df_work.columns:
                ref_col = risk_free_column
                asset_columns = [col for col in df_work.columns if col not in ['Data', risk_free_column]]
            elif len(df_work.columns) > 2:
                # Assumir segunda coluna como refer√™ncia se cont√©m palavras-chave
                second_col = df_work.columns[1]
                if any(term in second_col.lower() for term in ['taxa', 'livre', 'risco', 'ibov', 'ref', 'cdi', 'selic']):
                    ref_col = second_col
                    asset_columns = [col for col in df_work.columns if col not in ['Data', second_col]]
                else:
                    st.warning("‚ö†Ô∏è Coluna de refer√™ncia n√£o detectada. Usando primeira coluna de ativo.")
                    ref_col = df_work.columns[1]
                    asset_columns = df_work.columns[2:].tolist()
            else:
                st.error("‚ùå Necess√°rio pelo menos 3 colunas: Data, Refer√™ncia, Ativo")
                return None
        else:
            st.error("‚ùå Coluna 'Data' n√£o encontrada")
            return None
        
        # ===============================
        # PASSO 1: CRIAR ABA "DIFEREN√áA"
        # ===============================
        diferenca_data = {}
        diferenca_data['Data'] = dates_col
        
        for asset in asset_columns:
            # Cada ativo - refer√™ncia (linha por linha)
            diferenca_data[f"{asset}_diff"] = df_work[asset] - df_work[ref_col]
        
        df_diferenca = pd.DataFrame(diferenca_data)
        
        # ===============================
        # PASSO 2: CRIAR ABA "INTEGRAL" 
        # ===============================
        integral_data = {}
        integral_data['Data'] = dates_col
        
        for asset in asset_columns:
            # Soma acumulada das diferen√ßas
            integral_data[f"{asset}_integral"] = df_diferenca[f"{asset}_diff"].cumsum()
        
        df_integral = pd.DataFrame(integral_data)
        
        # ===============================
        # PASSO 3: CALCULAR 4 PAR√ÇMETROS
        # ===============================
        rankings = []
        all_slopes = []
        all_deviations = []
        
        # Primeira passada: coletar todas as inclina√ß√µes e desvios para normaliza√ß√£o
        for asset in asset_columns:
            try:
                # Dados para regress√£o (x = √≠ndice num√©rico das datas, y = integral)
                x_data = np.arange(len(df_integral))
                y_data = df_integral[f"{asset}_integral"].values
                
                # Calcular regress√£o linear
                slope, intercept, r_value, p_value, std_err = stats.linregress(x_data, y_data)
                
                # Desvio padr√£o das diferen√ßas
                std_dev = df_diferenca[f"{asset}_diff"].std()
                
                all_slopes.append(slope)  # Valor absoluto para normaliza√ß√£o
                all_deviations.append(std_dev)
                
            except Exception as e:
                print(f"Erro ao calcular par√¢metros para {asset}: {e}")
                continue
        
        # Encontrar m√°ximos para normaliza√ß√£o
        max_slope = max(all_slopes) if all_slopes else 1
        max_deviation = max(all_deviations) if all_deviations else 1
        
        # Segunda passada: calcular √≠ndices com normaliza√ß√£o
        for asset in asset_columns:
            try:
                # Dados para regress√£o
                x_data = np.arange(len(df_integral))
                y_data = df_integral[f"{asset}_integral"].values
                
                # Calcular regress√£o linear
                slope, intercept, r_value, p_value, std_err = stats.linregress(x_data, y_data)
                r_squared = r_value ** 2
                correlation = r_value
                
                # Desvio padr√£o das diferen√ßas
                std_dev = df_diferenca[f"{asset}_diff"].std()
                
                # NORMALIZA√á√ÉO
                slope_norm = slope / max_slope if max_slope > 0 else 0
                std_dev_norm = std_dev / max_deviation if max_deviation > 0 else 0
                
                # NOVA F√ìRMULA COM PESOS PERSONALIZ√ÅVEIS
                if slope > 0:  # S√≥ eliminar se inclina√ß√£o for negativa
                    # Garantir que correla√ß√£o est√° entre 0 e 1 (valor absoluto)
                    correlation_norm = abs(correlation)
                    
                    # Pegar pesos do session_state (ou usar padr√µes)
                    p_inc = st.session_state.get('peso_inclinacao', 0.33)
                    p_desv = st.session_state.get('peso_desvio', 0.33)
                    p_cor = st.session_state.get('peso_correlacao', 0.33)
                    
                    # Nova f√≥rmula: [P_inc√óInclina√ß√£o + P_desv√ó(1-Desvio) + P_cor√óCorrela√ß√£o] / (P_inc+P_desv+P_cor)
                    numerador = (p_inc * slope_norm + 
                               p_desv * (1 - std_dev_norm) + 
                               p_cor * correlation_norm)
                    denominador = p_inc + p_desv + p_cor
                    
                    indice = numerador / denominador if denominador > 0 else 0
                else:
                    indice = 0  # Inclina√ß√£o negativa = 0
                
                rankings.append({
                    'Ativo': asset,
                    'Inclina√ß√£o': slope,
                    'Inclina√ß√£o_Norm': slope_norm,
                    'R¬≤': r_squared,
                    'Correla√ß√£o': correlation,
                    'Desvio_Padr√£o': std_dev,
                    'Desvio_Norm': std_dev_norm,
                    '√çndice': indice
                })
                
            except Exception as e:
                print(f"Erro ao processar {asset}: {e}")
                rankings.append({
                    'Ativo': asset,
                    'Inclina√ß√£o': 0,
                    'Inclina√ß√£o_Norm': 0,
                    'R¬≤': 0,
                    'Correla√ß√£o': 0,
                    'Desvio_Padr√£o': 0,
                    'Desvio_Norm': 0,
                    '√çndice': 0
                })
        
        # Criar DataFrame e ordenar por √≠ndice
        df_ranking = pd.DataFrame(rankings)
        df_ranking = df_ranking.sort_values('√çndice', ascending=False).reset_index(drop=True)
        df_ranking['Posi√ß√£o'] = range(1, len(df_ranking) + 1)
        
        return {
            'ranking': df_ranking,
            'diferenca': df_diferenca,
            'integral': df_integral,
            'referencia': ref_col,
            'total_ativos': len(asset_columns)
        }
        
    except Exception as e:
        st.error(f"‚ùå Erro no c√°lculo do ranking: {str(e)}")
        return None

def display_ranking_results(ranking_result):
    """
    Exibe os resultados do ranking de forma organizada
    """
    if ranking_result is None:
        return
    
    df_ranking = ranking_result['ranking']
    referencia = ranking_result['referencia']
    total_ativos = ranking_result['total_ativos']
    
    # Cabe√ßalho
    st.subheader("üèÜ Ranking de Ativos")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üìä Total de Ativos", total_ativos)
    with col2:
        st.metric("üõ°Ô∏è Refer√™ncia", referencia)
    with col3:
        top_asset = df_ranking.iloc[0]['Ativo'] if len(df_ranking) > 0 else "N/A"
        st.metric("ü•á Melhor Ativo", top_asset)
    
    # Tabela principal (Top 10) - RECOLHIDA POR PADR√ÉO
    with st.expander("üìã Ver Top 10 Ativos", expanded=False):
        # Preparar dados para exibi√ß√£o
        display_df = df_ranking.head(10).copy()
        
        # Formatar colunas para melhor visualiza√ß√£o
        display_df['R¬≤'] = display_df['R¬≤'].apply(lambda x: f"{x:.3f}")
        display_df['Correla√ß√£o'] = display_df['Correla√ß√£o'].apply(lambda x: f"{x:.3f}")
        display_df['Inclina√ß√£o_Norm'] = display_df['Inclina√ß√£o_Norm'].apply(lambda x: f"{x:.3f}")
        display_df['Desvio_Norm'] = display_df['Desvio_Norm'].apply(lambda x: f"{x:.3f}")
        display_df['√çndice'] = display_df['√çndice'].apply(lambda x: f"{x:.4f}")
        
        # Selecionar colunas para exibi√ß√£o
        columns_to_show = ['Posi√ß√£o', 'Ativo', '√çndice', 'Inclina√ß√£o_Norm', 'R¬≤', 'Correla√ß√£o', 'Desvio_Norm']
        
        st.dataframe(
            display_df[columns_to_show], 
            use_container_width=True,
            hide_index=True
        )
    
    # Expandir com tabela completa
    with st.expander(f"üìä Ver ranking completo ({len(df_ranking)} ativos)", expanded=False):
        # Mostrar todas as colunas na vers√£o completa
        full_display_df = df_ranking.copy()
        full_display_df['R¬≤'] = full_display_df['R¬≤'].apply(lambda x: f"{x:.3f}")
        full_display_df['Correla√ß√£o'] = full_display_df['Correla√ß√£o'].apply(lambda x: f"{x:.3f}")
        full_display_df['Inclina√ß√£o_Norm'] = full_display_df['Inclina√ß√£o_Norm'].apply(lambda x: f"{x:.3f}")
        full_display_df['Desvio_Norm'] = full_display_df['Desvio_Norm'].apply(lambda x: f"{x:.3f}")
        full_display_df['√çndice'] = full_display_df['√çndice'].apply(lambda x: f"{x:.4f}")
        
        st.dataframe(
            full_display_df[columns_to_show],
            use_container_width=True,
            hide_index=True
        )
    
    return df_ranking

# =============================================================================
# FUN√á√ïES PARA INTEGRA√á√ÉO COM YAHOO FINANCE
# =============================================================================

def buscar_dados_yahoo(simbolos, data_inicio, data_fim, sufixo=".SA"):
    """
    Busca dados do Yahoo Finance (adaptado do seu c√≥digo)
    ATUALIZADO: Suporte a c√≥digos livres sem sufixo
    """
    dados_historicos = {}
    simbolos_com_erro = []
    
    start_date = data_inicio.strftime('%Y-%m-%d')
    end_date = data_fim.strftime('%Y-%m-%d')
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    for i, simbolo in enumerate(simbolos):
        try:
            status_text.text(f"Buscando {simbolo}... ({i+1}/{len(simbolos)})")
            progress_bar.progress((i + 1) / len(simbolos))
            
            # NOVA L√ìGICA: Verificar se √© c√≥digo livre ou precisa de sufixo
            if sufixo == "" or sufixo is None:
                # C√≥digos livres - usar exatamente como digitado
                simbolo_completo = simbolo
            elif "." in simbolo:
                # C√≥digo j√° tem sufixo - usar como est√° (para compatibilidade)
                simbolo_completo = simbolo
                st.info(f"üîç C√≥digo {simbolo} j√° cont√©m sufixo - usando como digitado")
            else:
                # C√≥digo tradicional - adicionar sufixo
                simbolo_completo = simbolo + sufixo
            
            ticker = yf.Ticker(simbolo_completo)
            hist = ticker.history(start=start_date, end=end_date, interval="1d")
            
            if not hist.empty and len(hist) > 5:  # Pelo menos 5 dias de dados
                # IMPORTANTE: Salvar com o c√≥digo ORIGINAL para manter consist√™ncia
                dados_historicos[simbolo] = hist
                
                # Debug para c√≥digos livres
                if sufixo == "":
                    st.success(f"‚úÖ {simbolo} ‚Üí encontrado como {simbolo_completo}")
            else:
                simbolos_com_erro.append(simbolo)
                if sufixo == "":
                    st.warning(f"‚ö†Ô∏è {simbolo} ‚Üí sem dados suficientes")
                
        except Exception as e:
            simbolos_com_erro.append(simbolo)
            if sufixo == "":
                st.error(f"‚ùå {simbolo} ‚Üí erro: {str(e)}")
    
    progress_bar.empty()
    status_text.empty()
    
    return dados_historicos, simbolos_com_erro

def criar_consolidado_yahoo(dados_historicos):
    """
    Cria DataFrame consolidado com pre√ßos de fechamento
    """
    if not dados_historicos:
        return None
    
    lista_dfs = []
    
    for simbolo, dados in dados_historicos.items():
        if 'Close' in dados.columns and not dados['Close'].empty:
            df_temp = pd.DataFrame({simbolo: dados['Close']})
            
            # Remove timezone se houver
            if hasattr(df_temp.index, 'tz') and df_temp.index.tz is not None:
                df_temp.index = df_temp.index.tz_localize(None)
            
            lista_dfs.append(df_temp)
    
    if lista_dfs:
        dados_consolidados = pd.concat(lista_dfs, axis=1, sort=True)
        dados_consolidados.index.name = "Data"
        return dados_consolidados
    
    return None

def transformar_base_zero(df_precos):
    """
    Transforma dados de pre√ßos para base 0 (adaptado do seu Base_0.py)
    """
    if df_precos is None or df_precos.empty:
        return None, []
    
    df_limpo = df_precos.copy()
    
    # 1. Remove colunas com primeiro valor inv√°lido
    colunas_removidas = []
    for coluna in df_limpo.columns:
        if len(df_limpo[coluna]) == 0:
            colunas_removidas.append(coluna)
            continue
            
        primeiro_valor = df_limpo[coluna].iloc[0]
        if pd.isna(primeiro_valor) or primeiro_valor == 0:
            colunas_removidas.append(coluna)
    
    if colunas_removidas:
        df_limpo = df_limpo.drop(columns=colunas_removidas)
    
    # Verifica se ainda h√° colunas v√°lidas
    if df_limpo.empty:
        return None, colunas_removidas
    
    # 2. Preenche valores faltantes/zero (CORRIGIDO - sem method='ffill')
    for coluna in df_limpo.columns:
        df_limpo[coluna] = df_limpo[coluna].replace(0, np.nan)
        df_limpo[coluna] = df_limpo[coluna].ffill()  # Novo m√©todo
    
    df_limpo = df_limpo.fillna(0)
    
    # 3. Calcula base zero
    df_base_zero = pd.DataFrame(index=df_limpo.index)
    
    for coluna in df_limpo.columns:
        valores = df_limpo[coluna].values
        
        if len(valores) == 0:
            continue
            
        cota_1 = valores[0]  # Primeiro valor como refer√™ncia
        
        if cota_1 == 0:  # Evita divis√£o por zero
            continue
        
        novos_valores = np.zeros(len(valores))
        novos_valores[0] = 0.0  # Primeiro valor sempre 0
        
        # Calcula os demais: (Pre√ßo_n - Pre√ßo_{n-1}) / Pre√ßo_1
        for i in range(1, len(valores)):
            cota_n = valores[i]
            cota_anterior = valores[i-1]
            novo_valor = (cota_n - cota_anterior) / cota_1
            novos_valores[i] = novo_valor
        
        df_base_zero[coluna] = novos_valores
    
    return df_base_zero, colunas_removidas

def processar_periodo_selecionado(df_bruto, data_inicio, data_fim, data_analise=None):
    """
    NOVA FUN√á√ÉO: Processa dados brutos para o per√≠odo selecionado
    Retorna dados em base 0 para otimiza√ß√£o e an√°lise estendida
    """
    try:
        # Verificar se tem coluna de data
        if 'Data' in df_bruto.columns:
            df_trabalho = df_bruto.copy()
            df_trabalho['Data'] = pd.to_datetime(df_trabalho['Data'])
            df_trabalho = df_trabalho.set_index('Data')
        else:
            # Assumir que o √≠ndice √© a data
            df_trabalho = df_bruto.copy()
            if not isinstance(df_trabalho.index, pd.DatetimeIndex):
                df_trabalho.index = pd.to_datetime(df_trabalho.index)
        
        # Filtrar per√≠odo para otimiza√ß√£o
        df_otimizacao = df_trabalho[(df_trabalho.index >= data_inicio) & 
                                     (df_trabalho.index <= data_fim)].copy()
        
        # Se tem data de an√°lise, pegar per√≠odo estendido
        df_analise_estendida = None
        if data_analise and data_analise > data_fim:
            df_analise_estendida = df_trabalho[(df_trabalho.index >= data_inicio) & 
                                               (df_trabalho.index <= data_analise)].copy()
        
        # Converter para base 0 - per√≠odo de otimiza√ß√£o
        df_base0_otimizacao, cols_removidas_otim = transformar_base_zero(df_otimizacao)
        
        # Converter para base 0 - per√≠odo estendido (se aplic√°vel)
        df_base0_analise = None
        if df_analise_estendida is not None:
            df_base0_analise, _ = transformar_base_zero(df_analise_estendida)
        
        # Adicionar coluna de data de volta
        if df_base0_otimizacao is not None:
            df_base0_otimizacao = df_base0_otimizacao.reset_index()
            df_base0_otimizacao.rename(columns={'index': 'Data'}, inplace=True)
        
        if df_base0_analise is not None:
            df_base0_analise = df_base0_analise.reset_index()
            df_base0_analise.rename(columns={'index': 'Data'}, inplace=True)
        
        return df_base0_otimizacao, df_base0_analise, cols_removidas_otim
        
    except Exception as e:
        st.error(f"Erro ao processar per√≠odo: {str(e)}")
        return None, None, []
    
def create_monthly_returns_table(returns_data, weights, dates=None, risk_free_returns=None):
    """
    Cria tabela de retornos mensais do portf√≥lio otimizado
    M√âTODO CORRIGIDO: Usa metodologia BASE 0 (igual ao otimizador)
    """
    # Calcular retornos di√°rios do portf√≥lio (base 0)
    portfolio_returns_daily = np.dot(returns_data.values, weights)
    
    # Calcular retornos acumulados (base 0) - IGUAL AO OTIMIZADOR
    portfolio_cumulative = np.cumsum(portfolio_returns_daily)
    
    # Usar datas reais se dispon√≠veis, sen√£o simular
    if dates is not None:
        portfolio_df = pd.DataFrame({
            'cumulative': portfolio_cumulative
        }, index=dates)
    else:
        # Simular datas (assumindo dados di√°rios consecutivos)
        start_date = pd.Timestamp('2020-01-01')
        dates = pd.date_range(start=start_date, periods=len(portfolio_cumulative), freq='D')
        portfolio_df = pd.DataFrame({
            'cumulative': portfolio_cumulative
        }, index=dates)
    
    # ========== NOVA METODOLOGIA: BASE 0 MENSAL ==========
    
    # 1. Agrupar por m√™s e pegar o √öLTIMO valor de cada m√™s
    monthly_cumulative = portfolio_df['cumulative'].resample('ME').last()
    
    # 2. Calcular retornos mensais em PERCENTUAIS
    monthly_returns = []
    previous_cumulative = 0  # Come√ßar do zero (base 0)

    for month_date, current_cumulative in monthly_cumulative.items():
        # ‚úÖ NOVO: Retorno percentual do m√™s
        if previous_cumulative != 0:
            # Crescimento relativo: (novo - antigo) / (1 + antigo)
            monthly_return = (current_cumulative - previous_cumulative) / (1 + previous_cumulative)
        else:
            # Primeiro m√™s: retorno direto da base 0
            monthly_return = current_cumulative
        
        monthly_returns.append(monthly_return)
        previous_cumulative = current_cumulative
    
    # 3. Criar s√©rie com retornos mensais
    monthly_returns_series = pd.Series(monthly_returns, index=monthly_cumulative.index)
    
    # ========== PROCESSAR TAXA LIVRE DE RISCO ==========
    monthly_risk_free = None
    if risk_free_returns is not None:
        # Mesmo processo para taxa livre de risco
        risk_free_cumulative = np.cumsum(risk_free_returns.values)
        
        if dates is not None:
            risk_free_df = pd.DataFrame({
                'cumulative': risk_free_cumulative
            }, index=dates)
        else:
            risk_free_df = pd.DataFrame({
                'cumulative': risk_free_cumulative
            }, index=dates)
        
        # Agrupar por m√™s
        monthly_rf_cumulative = risk_free_df['cumulative'].resample('ME').last()
        
        # Calcular retornos mensais da taxa livre (base 0)
        monthly_rf_returns = []
        previous_rf_cumulative = 0
        
        for month_date, current_rf_cumulative in monthly_rf_cumulative.items():
            monthly_rf_return = current_rf_cumulative - previous_rf_cumulative
            monthly_rf_returns.append(monthly_rf_return)
            previous_rf_cumulative = current_rf_cumulative
        
        monthly_risk_free = pd.Series(monthly_rf_returns, index=monthly_rf_cumulative.index)
    
    # ========== CRIAR TABELA PIVOTADA ==========
    
    # Criar DataFrame para pivotar
    monthly_df = pd.DataFrame({
        'Year': monthly_returns_series.index.year,
        'Month': monthly_returns_series.index.month,
        'Return': monthly_returns_series.values
    })
    
    # Pivotar para ter anos nas linhas e meses nas colunas
    pivot_table = monthly_df.pivot(index='Year', columns='Month', values='Return')
    
    # Renomear colunas para nomes dos meses
    month_names = {
        1: 'Jan', 2: 'Fev', 3: 'Mar', 4: 'Abr', 5: 'Mai', 6: 'Jun',
        7: 'Jul', 8: 'Ago', 9: 'Set', 10: 'Out', 11: 'Nov', 12: 'Dez'
    }
    pivot_table.columns = [month_names.get(col, f'M{col}') for col in pivot_table.columns]
    
    # ========== CALCULAR TOTAL ANUAL CORRIGIDO ==========
    
    # ========== CALCULAR TOTAL ANUAL CORRIGIDO ==========

    # ‚úÖ NOVA METODOLOGIA: Multiplica√ß√£o composta dos retornos percentuais
    yearly_returns = []
    for year in pivot_table.index:
        year_data = pivot_table.loc[year].dropna()
        if len(year_data) > 0:
            # Para percentuais: multiplica√ß√£o composta (1+r1)*(1+r2)*...*(1+rn) - 1
            annual_return = 1.0
            for monthly_return in year_data:
                annual_return *= (1 + monthly_return)
            annual_return -= 1  # Subtrair 1 para ter o ganho l√≠quido
            yearly_returns.append(annual_return)
        else:
            yearly_returns.append(np.nan)
    
    pivot_table['Total Anual'] = yearly_returns
    
    # ========== TABELA DE COMPARA√á√ÉO (SE H√Å TAXA LIVRE) ==========
    
    comparison_table = None
    if monthly_risk_free is not None:
        # Criar tabela similar para taxa livre
        rf_monthly_df = pd.DataFrame({
            'Year': monthly_risk_free.index.year,
            'Month': monthly_risk_free.index.month,
            'Return': monthly_risk_free.values
        })
        
        rf_pivot = rf_monthly_df.pivot(index='Year', columns='Month', values='Return')
        rf_pivot.columns = [month_names.get(col, f'M{col}') for col in rf_pivot.columns]
        
        # Calcular total anual da taxa livre (soma simples - base 0)
        rf_yearly = []
        for year in rf_pivot.index:
            year_data = rf_pivot.loc[year].dropna()
            if len(year_data) > 0:
                annual_return = year_data.sum()  # Soma simples para base 0
                rf_yearly.append(annual_return)
            else:
                rf_yearly.append(np.nan)
        
        rf_pivot['Total Anual'] = rf_yearly
        
        # Criar tabela de compara√ß√£o (excesso de retorno)
        comparison_table = pivot_table - rf_pivot
    
    return pivot_table, comparison_table

def load_from_github(filename):
    """
    Carrega arquivo Excel diretamente do GitHub
    MODIFICADO: Agora salva dados brutos + processa para base 0 (igual Yahoo)
    """
    url = f"https://raw.githubusercontent.com/{GITHUB_USER}/{GITHUB_REPO}/{GITHUB_BRANCH}/sample_data/{filename}"
    
    try:
        df_bruto = pd.read_excel(url)

        # ‚úÖ NORMALIZAR: Primeira coluna sempre "Data"
        if len(df_bruto.columns) > 0:
            df_bruto.columns.values[0] = "Data"
        
        # SALVAR DADOS BRUTOS - N√ÉO PROCESSAR AINDA!
        st.session_state['dados_brutos'] = df_bruto.copy()
        st.session_state['fonte_dados'] = f"GitHub: {filename}"
        
        # Identificar per√≠odo dispon√≠vel
        if 'Data' in df_bruto.columns or (isinstance(df_bruto.columns[0], str) and 'data' in df_bruto.columns[0].lower()):
            try:
                if 'Data' in df_bruto.columns:
                    datas = pd.to_datetime(df_bruto['Data'])
                else:
                    datas = pd.to_datetime(df_bruto.iloc[:, 0])
                
                st.session_state['periodo_disponivel'] = {
                    'inicio': datas.min(),
                    'fim': datas.max(),
                    'total_dias': len(datas)
                }
            except:
                pass
        
        return True
        
    except Exception as e:
        st.error(f"Erro ao carregar arquivo do GitHub: {str(e)}")
        st.info("Verifique se o arquivo existe e o reposit√≥rio √© p√∫blico")
        return False

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Otimizador de Portf√≥lio v3.0",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado
st.markdown("""
<style>
    .help-button {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 999;
    }
    .stDateInput > div > div > input {
        background-color: #f0f2f6;
    }
    .period-selector {
        background-color: #e8f4f8;
        padding: 15px;
        border-radius: 10px;
        margin: 10px 0;
    }
</style>
""", unsafe_allow_html=True)

# Inicializar session state para controle da ajuda
if 'show_help' not in st.session_state:
    st.session_state.show_help = False

# Fun√ß√£o para alternar ajuda
def toggle_help():
    st.session_state.show_help = not st.session_state.show_help

# T√≠tulo
st.title("üìä Otimizador de Portf√≥lio v3.0")
col1, col2 = st.columns([6, 1])
with col1:
    st.markdown("*Baseado na metodologia de Markowitz - Agora com Janelas Temporais*")
with col2:
    if st.button("üìñ Ajuda", use_container_width=True, help="Clique para ver a documenta√ß√£o"):
        toggle_help()

# Mostrar documenta√ß√£o se solicitado
if st.session_state.show_help:
    with st.container():
        st.markdown("---")
        tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs(["üöÄ In√≠cio R√°pido", "üìä Preparar Dados", "üìÖ Janelas Temporais", "‚öôÔ∏è Configura√ß√µes", "üìà Resultados", "‚ùì FAQ"])
        
        with tab1:
            st.markdown("""
            ## üöÄ Guia de In√≠cio R√°pido - v3.0
            
            ### 4 Passos com Janelas Temporais:
            
            1. **üìÅ Carregue seus dados completos**
               - Use qualquer fonte: Upload, GitHub ou Yahoo
               - Carregue TODO o per√≠odo dispon√≠vel (ex: 2015-2025)
            
            2. **üìÖ Defina as 3 datas cr√≠ticas**
               - **In√≠cio da Otimiza√ß√£o**: Onde come√ßar o treino
               - **Fim da Otimiza√ß√£o**: Onde terminar o treino
               - **Fim da An√°lise**: At√© onde validar (forward testing)
            
            3. **üéØ Configure e otimize**
               - Selecione os ativos
               - Escolha o objetivo
               - Ajuste os limites
            
            4. **üìä Analise os resultados**
               - Veja performance no per√≠odo de treino
               - Valide no per√≠odo estendido
               - Compare in-sample vs out-of-sample
            """)
        
        with tab2:
            st.markdown("""
            ## üìä Como Preparar seus Dados
            
            ### Formato da Planilha Excel:
            
            | Data | Taxa Ref (opcional) | Ativo 1 | Ativo 2 | ... |
            |------|---------------------|---------|---------|-----|
            | 01/01/2020 | 120.54 | 205.32 |145.65 | ... |
            | 02/01/2020 | 123.67 | 204.21 |139.57 | ... |
            
            ### ‚ö†Ô∏è NOVO em v3.0:
            - **Carregue TODOS os dados dispon√≠veis**
            - **N√£o se preocupe com o per√≠odo ainda**
            - **Os dados ser√£o preservados em formato bruto**
            """)
        
        with tab3:
            st.markdown("""
            ## üìÖ Sistema de Janelas Temporais (NOVO!)
            
            ### Conceito de 3 Datas:
            
            ```
            |-------- Dados Completos Carregados --------|
                    |--- Otimiza√ß√£o ---|--- Valida√ß√£o ---|
                    ‚Üë                 ‚Üë                 ‚Üë
                 In√≠cio           Fim              An√°lise
                Otimiza√ß√£o     Otimiza√ß√£o          Final
            ```
            
            ### üìä Vantagens:
            
            1. **Backtesting Realista**
               - Otimize em dados hist√≥ricos
               - Valide em dados futuros n√£o vistos
            
            2. **M√∫ltiplas An√°lises**
               - Teste v√°rios per√≠odos sem recarregar
               - Compare diferentes janelas
            """)
        
        with tab4:
            st.markdown("""
            ## ‚öôÔ∏è Configura√ß√µes Detalhadas
            
            ### üéØ Objetivos de Otimiza√ß√£o:
            
            | Objetivo | Quando Usar |
            |----------|-------------|
            | **Sharpe Ratio** | Carteiras tradicionais |
            | **Sortino Ratio** | Avers√£o a perdas |
            | **Minimizar Risco** | Perfil conservador |
            """)
        
        with tab5:
            st.markdown("""
            ## üìà Interpretando Resultados
            
            ### M√©tricas Duplas:
            
            **In-Sample**: Performance no treino
            **Out-of-Sample**: Performance na valida√ß√£o
            """)
        
        with tab6:
            st.markdown("""
            ## ‚ùì FAQ v3.0
            
            ### Como escolher as datas?
            - Otimiza√ß√£o: 70% dos dados
            - Valida√ß√£o: 30% dos dados
            """)
        
        # Bot√£o para fechar ajuda
        st.markdown("---")
        if st.button("‚ùå Fechar Ajuda", use_container_width=False):
            toggle_help()
            st.rerun()

# Configura√ß√£o dos dados de exemplo no GitHub
GITHUB_USER = "psrs2000"
GITHUB_REPO = "Portfolio_Optimizer"
GITHUB_BRANCH = "main"

# Arquivos de exemplo dispon√≠veis
SAMPLE_DATA = {
    "üè¢ A√ß√µes Brasileiras": {
        "filename": "acoes_brasileiras.xlsx",
        "description": "Principais a√ß√µes do Ibovespa"
    },
    "üè† Fundos Imobili√°rios": {
        "filename": "fundos_imobiliarios.xlsx",
        "description": "FIIs negociados na B3"
    },
    "üí∞ Fundos de Investimento": {
        "filename": "fundos_de_investimento.xlsx",
        "description": "Exemplo com fundos de investimento cadastrados na CVM"
    },
    "üåç ETFs Nacionais": {
        "filename": "etfs_nacionais.xlsx",
        "description": "ETFs de mercados Nacionais"
    },
    "ü™ô Criptomoedas": {
        "filename": "criptomoedas.xlsx",
        "description": "Bitcoin, Ethereum e principais"
    }
}

# Sidebar para carregamento de dados
with st.sidebar:
    st.header("üìÅ Carregar Dados")
    
    # Tabs para organizar op√ß√µes
    tab_exemplo, tab_upload, tab_yahoo = st.tabs(["üìä Exemplos", "üì§ Upload", "üåê Yahoo Finance"])
    
    with tab_exemplo:
        st.markdown("### Dados de Exemplo")
        
        # Verificar se GitHub est√° configurado
        if GITHUB_USER == "SEU_USUARIO_GITHUB":
            st.warning(
                "‚ö†Ô∏è Configure o GitHub primeiro!\n\n"
                "1. Edite o arquivo app.py\n"
                "2. Substitua GITHUB_USER e GITHUB_REPO\n"
                "3. Fa√ßa upload dos arquivos Excel em /sample_data/"
            )
        else:
            st.info("Clique para carregar:")
            
            # Bot√µes para cada dataset
            for name, info in SAMPLE_DATA.items():
                if st.button(
                    f"{name}",
                    use_container_width=True,
                    help=info['description']
                ):
                    with st.spinner(f"Carregando {name}..."):
                        if load_from_github(info['filename']):
                            st.success("‚úÖ Dados brutos salvos!")
                            st.info("üìÖ Agora selecione o per√≠odo na √°rea principal ‚Üí")
                            st.rerun()
    
    with tab_upload:
        st.markdown("### Upload Manual")
        uploaded_file = st.file_uploader(
            "Escolha sua planilha Excel",
            type=['xlsx', 'xls'],
            help="Planilha com dados hist√≥ricos dos ativos"
        )
        
        if uploaded_file is not None:
            try:
                # Ler arquivo bruto
                df_bruto = pd.read_excel(uploaded_file)

                # ‚úÖ NORMALIZAR: Primeira coluna sempre "Data"
                if len(df_bruto.columns) > 0:
                    df_bruto.columns.values[0] = "Data"
                
                # SALVAR DADOS BRUTOS - N√ÉO PROCESSAR!
                st.session_state['dados_brutos'] = df_bruto.copy()
                st.session_state['fonte_dados'] = "Upload Manual"
                
                # Calcular per√≠odo dispon√≠vel se tem coluna de data
                if 'Data' in df_bruto.columns or (isinstance(df_bruto.columns[0], str) and 'data' in df_bruto.columns[0].lower()):
                    try:
                        if 'Data' in df_bruto.columns:
                            datas_upload = pd.to_datetime(df_bruto['Data'])
                        else:
                            datas_upload = pd.to_datetime(df_bruto.iloc[:, 0])
                        
                        st.session_state['periodo_disponivel'] = {
                            'inicio': datas_upload.min(),
                            'fim': datas_upload.max(),
                            'total_dias': len(datas_upload)
                        }
                    except:
                        pass
                
                st.success("‚úÖ Dados brutos salvos!")
                st.info("üìÖ Selecione o per√≠odo na √°rea principal ‚Üí")
                #st.rerun()
                
            except Exception as e:
                st.error(f"Erro ao ler arquivo: {str(e)}")

    with tab_yahoo:
        st.markdown("### üåê Buscar Online")
        st.markdown("Busque dados diretamente do Yahoo Finance")
        
        # Configura√ß√£o de s√≠mbolos
        st.markdown("**üìù S√≠mbolos dos Ativos:**")
        simbolos_input = st.text_area(
            "Digite os c√≥digos (um por linha):",
            value="PETR4\nVALE3\nITUB4\nBBDC4\nABEV3",
            height=120,
            help="Digite os c√≥digos dos ativos, um por linha. Ex: PETR4, VALE3, etc."
        )
        
        # NOVO: Ativo de Refer√™ncia
        st.markdown("**üèõÔ∏è Ativo de Refer√™ncia (Taxa Livre de Risco):**")
        
        col_ref1, col_ref2 = st.columns([3, 1])
        
        with col_ref1:
            ativo_referencia = st.text_input(
                "C√≥digo do ativo de refer√™ncia:",
                value="BOVA11",
                help="Ex: BOVA11 (Ibovespa), LFTS11 (CDI), IVV (S&P500)"
            )
        
        with col_ref2:
            usar_referencia = st.checkbox(
                "Incluir",
                value=True,
                help="Marque para incluir ativo de refer√™ncia"
            )
        
        # Sugest√µes r√°pidas
        st.markdown("üí° **Sugest√µes:** BOVA11 (Ibovespa), LFTS11 (CDI), SMAL11 (Small Caps)")
        
        # Tipo de ativo - ATUALIZADO COM C√ìDIGOS LIVRES
        tipos_disponiveis = [
            ("A√ß√µes Brasileiras", ".SA"),
            ("Criptomoedas", ""),
            ("A√ß√µes Americanas", ""),
            ("ETFs Americanos", ""),
            ("C√≥digos Livres do Yahoo", "LIVRE")
        ]
        
        tipo_ativo = st.selectbox(
            "üè∑Ô∏è Tipo de Ativo:",
            tipos_disponiveis,
            format_func=lambda x: x[0],
            index=0
        )
        sufixo = tipo_ativo[1]
        
        # NOVA SE√á√ÉO: Instru√ß√£o condicional para c√≥digos livres
        if sufixo == "LIVRE":
            st.info(
                "üî• **Modo C√≥digos Livres Ativado!**\n\n"
                "‚Ä¢ Digite os c√≥digos **exatamente** como aparecem no Yahoo Finance\n"
                "‚Ä¢ Exemplos: `PETR4.SA`, `MSFT`, `BTC-USD`\n"
                "‚Ä¢ N√£o ser√° adicionado nenhum sufixo autom√°tico"
            )
        
        # Per√≠odo
        st.markdown("**üìÖ Per√≠odo:**")
        col1, col2 = st.columns(2)
        
        with col1:
            data_inicio = st.date_input(
                "Data In√≠cio:",
                value=datetime.now() - timedelta(days=365*3),
                max_value=datetime.now().date()
            )
        
        with col2:
            data_fim = st.date_input(
                "Data Fim:",
                value=datetime.now().date(),
                max_value=datetime.now().date()
            )
        
        # Bot√£o para buscar
        if st.button("üöÄ Buscar e Processar", use_container_width=True, type="primary"):
            # Valida√ß√µes
            simbolos_lista = [s.strip().upper() for s in simbolos_input.split('\n') if s.strip()]
            
            if len(simbolos_lista) < 2:
                st.error("‚ùå Digite pelo menos 2 s√≠mbolos")
            elif data_inicio >= data_fim:
                st.error("‚ùå Data de in√≠cio deve ser anterior √† data fim")
            else:
                # NOVA L√ìGICA: C√≥digos livres vs sufixo autom√°tico
                simbolos_completos = simbolos_lista.copy()
                
                if usar_referencia and ativo_referencia.strip():
                    ativo_ref_clean = ativo_referencia.strip().upper()
                    if ativo_ref_clean not in simbolos_completos:
                        simbolos_completos.append(ativo_ref_clean)
                        st.info(f"üìä Ativo de refer√™ncia adicionado: {ativo_ref_clean}")
                
                with st.spinner("üîÑ Buscando dados do Yahoo Finance..."):
                    # MODIFICA√á√ÉO PRINCIPAL: Condicional do sufixo
                    if sufixo == "LIVRE":
                        # Modo c√≥digos livres - n√£o adiciona sufixo
                        dados_yahoo, erros = buscar_dados_yahoo(
                            simbolos_completos, 
                            datetime.combine(data_inicio, datetime.min.time()),
                            datetime.combine(data_fim, datetime.min.time()),
                            sufixo=""  # ‚Üê Sem sufixo
                        )
                        st.info("üî• Modo c√≥digos livres: buscando c√≥digos como digitados")
                    else:
                        # Modo tradicional - adiciona sufixo
                        dados_yahoo, erros = buscar_dados_yahoo(
                            simbolos_completos, 
                            datetime.combine(data_inicio, datetime.min.time()),
                            datetime.combine(data_fim, datetime.min.time()),
                            sufixo
                        )
                    
                    if dados_yahoo:
                        st.success(f"‚úÖ Dados obtidos para {len(dados_yahoo)} ativos")
                        
                        if erros:
                            st.warning(f"‚ö†Ô∏è Erros em: {', '.join(erros)}")
                        
                        # 2. Consolidar PRE√áOS BRUTOS
                        with st.spinner("üîÑ Consolidando pre√ßos..."):
                            df_precos_brutos = criar_consolidado_yahoo(dados_yahoo)
                        
                        if df_precos_brutos is not None:
                            st.success(f"‚úÖ Pre√ßos consolidados: {df_precos_brutos.shape}")
                            
                            # Preparar DataFrame com Data
                            df_precos_com_data = df_precos_brutos.copy()
                            df_precos_com_data = df_precos_com_data.reset_index()  # Data vira primeira coluna
                            
                            # REORGANIZAR ATIVO DE REFER√äNCIA se necess√°rio
                            if usar_referencia and ativo_referencia.strip():
                                ativo_ref_clean = ativo_referencia.strip().upper()
                                
                                if ativo_ref_clean in df_precos_com_data.columns:
                                    # Renomear para que o otimizador detecte
                                    nome_referencia = f"Taxa_Ref_{ativo_ref_clean}"
                                    
                                    # Reorganizar: Data, Taxa_Ref, Outros_Ativos
                                    colunas_reorganizadas = ['Data']
                                    outras_colunas = [col for col in df_precos_com_data.columns 
                                                    if col not in ['Data', ativo_ref_clean]]
                                    
                                    # Renomear a coluna do ativo de refer√™ncia
                                    df_precos_com_data = df_precos_com_data.rename(columns={ativo_ref_clean: nome_referencia})
                                    
                                    # Reorganizar colunas: Data, Taxa_Ref, Outros
                                    colunas_reorganizadas.append(nome_referencia)
                                    colunas_reorganizadas.extend(outras_colunas)
                                    
                                    df_precos_com_data = df_precos_com_data[colunas_reorganizadas]
                                    
                                    st.info(f"üèõÔ∏è Ativo de refer√™ncia renomeado para: {nome_referencia}")
                            
                            # SALVAR DADOS BRUTOS (PERP√âTUA)
                            st.session_state['dados_brutos'] = df_precos_com_data
                            st.session_state['fonte_dados'] = f"Yahoo Finance ({len(dados_yahoo)} ativos)"
                            st.session_state['periodo_disponivel'] = {
                                'inicio': df_precos_com_data['Data'].min(),
                                'fim': df_precos_com_data['Data'].max(),
                                'total_dias': len(df_precos_com_data)
                            }
                            
                            st.success("üéâ Dados brutos salvos!")
                            st.info("üìÖ Agora selecione o per√≠odo na √°rea principal ‚Üí")
                            st.rerun()
                            
                        else:
                            st.error("‚ùå Erro ao consolidar dados")
                    else:
                        st.error("‚ùå Nenhum dado encontrado. Verifique os s√≠mbolos.")
                        
# √ÅREA PRINCIPAL - NOVO FLUXO COM JANELAS TEMPORAIS
# Verificar se h√° dados brutos carregados
dados_brutos = st.session_state.get('dados_brutos', None)

if dados_brutos is not None:
    # Mostrar origem dos dados
    fonte = st.session_state.get('fonte_dados', 'Desconhecida')
    periodo_disp = st.session_state.get('periodo_disponivel', None)
    
    # Header com informa√ß√µes
    col_info1, col_info2, col_download, col_clear = st.columns([3, 3, 1, 1])
    
    with col_info1:
        st.success(f"‚úÖ **Dados Carregados:** {fonte}")
    
    with col_info2:
        if periodo_disp:
            st.info(f"üìÖ **Per√≠odo Dispon√≠vel:** {periodo_disp['inicio'].strftime('%d/%m/%Y')} a {periodo_disp['fim'].strftime('%d/%m/%Y')} ({periodo_disp['total_dias']} dias)")
    
    with col_download:
        # Fun√ß√£o para converter DataFrame para Excel
        def convert_to_excel(df):
            from io import BytesIO
            output = BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                # Adicionar planilha principal com dados
                df.to_excel(writer, index=False, sheet_name='Dados')
                
                # Adicionar planilha com metadados
                metadata = pd.DataFrame({
                    'Informa√ß√£o': ['Fonte dos Dados', 'Data do Download', 'Per√≠odo In√≠cio', 'Per√≠odo Fim', 'Total de Dias', 'Total de Ativos'],
                    'Valor': [
                        fonte,
                        datetime.now().strftime('%d/%m/%Y %H:%M:%S'),
                        periodo_disp['inicio'].strftime('%d/%m/%Y') if periodo_disp else 'N/A',
                        periodo_disp['fim'].strftime('%d/%m/%Y') if periodo_disp else 'N/A',
                        str(periodo_disp['total_dias']) if periodo_disp else 'N/A',
                        str(len(df.columns) - 1)  # -1 para excluir coluna Data
                    ]
                })
                metadata.to_excel(writer, index=False, sheet_name='Metadados')
                
                # Adicionar planilha com instru√ß√µes
                instrucoes = pd.DataFrame({
                    'Como usar este arquivo': [
                        '1. Este arquivo cont√©m dados hist√≥ricos de ativos financeiros',
                        '2. A primeira coluna deve sempre ser "Data"',
                        '3. A segunda coluna pode ser uma taxa de refer√™ncia (opcional)',
                        '4. As demais colunas s√£o os ativos para an√°lise',
                        '5. Use este arquivo como template para seus pr√≥prios dados',
                        '6. Fa√ßa upload deste arquivo no Otimizador de Portf√≥lio',
                        '',
                        'Estrutura esperada:',
                        'Data | Taxa_Ref | Ativo1 | Ativo2 | Ativo3 | ...',
                        '',
                        'Dica: A taxa de refer√™ncia √© detectada automaticamente',
                        'se contiver as palavras: taxa, livre, risco, ref, cdi, selic'
                    ]
                })
                instrucoes.to_excel(writer, index=False, sheet_name='Instru√ß√µes')
                
            return output.getvalue()
        
        try:
            excel_data = convert_to_excel(dados_brutos)
            
            # Nome do arquivo com timestamp
            filename = f"portfolio_data_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
            
            st.download_button(
                label="üíæ Baixar",
                data=excel_data,
                file_name=filename,
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                help="Baixar dados para uso posterior",
                use_container_width=True
            )
        except Exception as e:
            st.error(f"Erro ao preparar download: {str(e)}")
    
    with col_clear:
        if st.button("üîÑ Limpar", use_container_width=True, help="Limpar todos os dados carregados"):
            for key in ['dados_brutos', 'fonte_dados', 'periodo_disponivel', 'df', 'df_analise']:
                if key in st.session_state:
                    del st.session_state[key]
            st.rerun()
    
    # NOVA SE√á√ÉO: SELE√á√ÉO DE JANELAS TEMPORAIS
    st.header("üìÖ Definir Janelas Temporais")
    
    # Container estilizado para sele√ß√£o de datas (com sliders)
    with st.container():
        st.markdown('<div class="period-selector">', unsafe_allow_html=True)
        
        st.markdown("üéØ **Configure as 3 datas cr√≠ticas para an√°lise:**")
        
        if periodo_disp:
            total_dias = (periodo_disp['fim'] - periodo_disp['inicio']).days
            dias_otimizacao = int(total_dias * 0.7)
            
            default_inicio = periodo_disp['inicio'].date()
            default_fim_otim = (periodo_disp['inicio'] + timedelta(days=dias_otimizacao)).date()
            default_fim_analise = periodo_disp['fim'].date()
        else:
            default_inicio = datetime(2020, 1, 1).date()
            default_fim_otim = datetime(2022, 12, 31).date()
            default_fim_analise = datetime(2024, 12, 31).date()

        # Slider de intervalo para per√≠odo de otimiza√ß√£o
        data_inicio_otim, data_fim_otim = st.slider(
            "üìÖ Selecione o per√≠odo de **Otimiza√ß√£o (Treinamento)**",
            min_value=default_inicio,
            max_value=default_fim_analise,
            value=(default_inicio, default_fim_otim),
            format="DD/MM/YYYY",
            help="Arraste as extremidades para escolher o intervalo de treino"
        )
        
        # Slider para Fim da An√°lise (valida√ß√£o)
        usar_validacao = st.checkbox("Usar valida√ß√£o (forward test)?", value=True)
        
        if usar_validacao:
            data_fim_analise = st.slider(
                "üìä Selecione o **Fim da An√°lise (Valida√ß√£o)**",
                min_value=data_fim_otim,
                max_value=default_fim_analise,
                value=default_fim_analise,
                format="DD/MM/YYYY",
                help="Define at√© onde voc√™ deseja validar os resultados"
            )
        else:
            data_fim_analise = None
        
        st.markdown('</div>', unsafe_allow_html=True)        
        # Visualiza√ß√£o das janelas selecionadas
        if data_fim_analise:
            dias_otim = (data_fim_otim - data_inicio_otim).days
            dias_valid = (data_fim_analise - data_fim_otim).days
            dias_total = dias_otim + dias_valid
            
            col_viz1, col_viz2, col_viz3 = st.columns(3)
            
            with col_viz1:
                st.metric("üìä Dias para Otimiza√ß√£o", f"{dias_otim}", f"{(dias_otim/dias_total*100):.0f}% do total")
            
            with col_viz2:
                st.metric("üîç Dias para Valida√ß√£o", f"{dias_valid}", f"{(dias_valid/dias_total*100):.0f}% do total")
            
            with col_viz3:
                st.metric("üìà Total de Dias", f"{dias_total}", f"{(dias_total/periodo_disp['total_dias']*100):.0f}% dispon√≠vel" if periodo_disp else "")
        else:
            dias_otim = (data_fim_otim - data_inicio_otim).days
            st.metric("üìä Dias para Otimiza√ß√£o", f"{dias_otim}")
        
        # Bot√£o para processar per√≠odo
        if st.button("‚ö° Processar Per√≠odo Selecionado", use_container_width=True, type="primary"):
            with st.spinner("üîÑ Processando dados para o per√≠odo selecionado..."):
                
                # Converter datas para datetime
                inicio_dt = pd.Timestamp(data_inicio_otim)
                fim_dt = pd.Timestamp(data_fim_otim)
                analise_dt = pd.Timestamp(data_fim_analise) if data_fim_analise else None
                
                # Processar dados para os per√≠odos selecionados
                df_otimizacao, df_analise_estendida, cols_removidas = processar_periodo_selecionado(
                    dados_brutos,
                    inicio_dt,
                    fim_dt,
                    analise_dt
                )
                
                if df_otimizacao is not None:
                    # Salvar no session_state
                    st.session_state['df'] = df_otimizacao
                    st.session_state['df_analise'] = df_analise_estendida
                    st.session_state['periodo_otimizacao'] = {
                        'inicio': inicio_dt,
                        'fim': fim_dt
                    }
                    st.session_state['periodo_analise'] = {
                        'inicio': inicio_dt,
                        'fim': analise_dt if analise_dt else fim_dt
                    }
                    
                    st.success("‚úÖ Per√≠odo processado com sucesso!")
                    
                    if cols_removidas:
                        st.warning(f"‚ö†Ô∏è Colunas removidas (sem dados v√°lidos): {', '.join(cols_removidas)}")
                    
                    st.info(f"üìä {len(df_otimizacao.columns)-1} ativos prontos para otimiza√ß√£o")
                    
                    if df_analise_estendida is not None:
                        st.info(f"üîç Per√≠odo de valida√ß√£o configurado: {(analise_dt - fim_dt).days} dias adicionais")
                else:
                    st.error("‚ùå Erro ao processar per√≠odo selecionado")
    
    # Mostrar dados processados se existirem
    df = st.session_state.get('df', None)
    df_analise = st.session_state.get('df_analise', None)
    
    if df is not None:

        # NOVA SE√á√ÉO: RANKING DE ATIVOS (FASE 1)
        #st.header("üèÜ Ranking de Ativos (NOVO!)")
        
        # Checkbox para ativar ranking
        use_ranking = st.checkbox(
            "ü§ñ Ativar ranking autom√°tico de ativos",
            help="Calcula √≠ndice de qualidade para cada ativo baseado em 4 par√¢metros"
        )
        
        ranking_result = None
        
        if use_ranking:
            with st.spinner("üßÆ Calculando ranking dos ativos..."):
                # Calcular ranking baseado nos dados de otimiza√ß√£o
                ranking_result = calculate_asset_ranking(df)
                
                if ranking_result is not None:
                    # Exibir resultados
                    top_assets_df = display_ranking_results(ranking_result)
                    
                    # Salvar no session_state para uso posterior
                    st.session_state['ranking_result'] = ranking_result
                    
                    st.success("‚úÖ Ranking calculado com sucesso!")

                    # NOVA SE√á√ÉO: Configura√ß√£o de pesos
                    with st.expander("‚öôÔ∏è Configurar pesos dos par√¢metros", expanded=False):
                        st.markdown("**Personalize a import√¢ncia de cada fator no ranking:**")
                        
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            p_inc = st.slider(
                                "üìà Peso Inclina√ß√£o", 
                                min_value=0.0, 
                                max_value=1.0, 
                                value=st.session_state.get('peso_inclinacao', 0.33),
                                step=0.05,
                                help="Import√¢ncia do crescimento/tend√™ncia"
                            )
                        
                        with col2:
                            p_desv = st.slider(
                                "üìä Peso Desvio Padr√£o", 
                                min_value=0.0, 
                                max_value=1.0, 
                                value=st.session_state.get('peso_desvio', 0.33),
                                step=0.05,
                                help="Import√¢ncia da baixa volatilidade"
                            )
                        
                        with col3:
                            p_cor = st.slider(
                                "üéØ Peso Correla√ß√£o", 
                                min_value=0.0, 
                                max_value=1.0, 
                                value=st.session_state.get('peso_correlacao', 0.33),
                                step=0.05,
                                help="Import√¢ncia da consist√™ncia linear"
                            )
                        
                        # Atualizar session_state
                        st.session_state['peso_inclinacao'] = p_inc
                        st.session_state['peso_desvio'] = p_desv
                        st.session_state['peso_correlacao'] = p_cor
                        
                        # Mostrar soma dos pesos
                        total_pesos = p_inc + p_desv + p_cor
                        if total_pesos > 0:
                            st.info(f"üí° **Distribui√ß√£o:** Inclina√ß√£o {p_inc/total_pesos*100:.0f}% | Estabilidade {p_desv/total_pesos*100:.0f}% | Correla√ß√£o {p_cor/total_pesos*100:.0f}%")
                        
                        # Bot√£o para recalcular
                        if st.button("üîÑ Recalcular Ranking", help="Aplicar novos pesos ao ranking"):
                            st.rerun()

# NOVA FUNCIONALIDADE: Sele√ß√£o autom√°tica
                    st.markdown("---")
                    st.subheader("üéØ Sele√ß√£o Autom√°tica de Ativos")
                    
                    col1, col2, col3 = st.columns([1.5, 1.5, 1])

                    with col1:
                        score_min = st.number_input(
                            "üìâ Score m√≠nimo:",
                            min_value=0.0,
                            max_value=1.0,
                            value=0.7,
                            step=0.05,
                            help="Score m√≠nimo para sele√ß√£o (0 a 1)"
                        )

                    with col2:
                        score_max = st.number_input(
                            "üìà Score m√°ximo:",
                            min_value=0.0,
                            max_value=1.0,
                            value=1.0,
                            step=0.05,
                            help="Score m√°ximo para sele√ß√£o (0 a 1)"
                        )

                    with col3:
                        st.markdown("<br>", unsafe_allow_html=True)  # Espa√ßo para alinhar com os inputs
                        auto_select_btn = st.button(
                            "‚úÖ Selecionar Top Ativos", 
                            type="primary",
                            use_container_width=True,
                            help="Aplica sele√ß√£o autom√°tica baseada no ranking"
                        )
                    
                    # Processar sele√ß√£o autom√°tica
                    if auto_select_btn:
                        # Validar range
                        if score_min > score_max:
                            st.error("‚ùå Score m√≠nimo deve ser menor que o m√°ximo!")
                        else:
                            # Filtrar ativos por range de score
                            filtered_ranking = ranking_result['ranking'][
                                (ranking_result['ranking']['√çndice'] >= score_min) & 
                                (ranking_result['ranking']['√çndice'] <= score_max)
                            ]
                            top_assets = filtered_ranking['Ativo'].tolist()
                            
                            if len(top_assets) == 0:
                                st.warning(f"‚ö†Ô∏è Nenhum ativo encontrado no range {score_min:.2f} - {score_max:.2f}")
                                top_assets = []
                        
                        # Salvar sele√ß√£o autom√°tica no session_state
                        st.session_state['selected_assets_auto'] = top_assets
                        st.session_state['auto_selection_active'] = True
                        st.session_state['score_range_selected'] = (score_min, score_max)
                        
                        if len(top_assets) > 0:
                            st.success(f"üéâ {len(top_assets)} ativos selecionados no range {score_min:.2f} - {score_max:.2f}!")
                            
                            # Mostrar estat√≠sticas do range
                            if len(filtered_ranking) > 0:
                                avg_score = filtered_ranking['√çndice'].mean()
                                st.info(f"üìä Score m√©dio dos selecionados: {avg_score:.3f}")
                        
                        # Mostrar lista dos ativos selecionados
                        with st.expander("üëÄ Ver ativos selecionados", expanded=False):
                            selected_df = filtered_ranking[['Posi√ß√£o', 'Ativo', '√çndice']].copy()
                            selected_df['√çndice'] = selected_df['√çndice'].apply(lambda x: f"{x:.4f}")
                            st.dataframe(selected_df, use_container_width=True, hide_index=True)
                        
                        st.info("üëá Agora v√° para a se√ß√£o de otimiza√ß√£o abaixo!")

                else:
                    st.error("‚ùå Erro ao calcular ranking")
        # Tabs para visualizar dados
        tab_otim, tab_valid = st.tabs(["üìä Dados de Otimiza√ß√£o", "üîç Dados de Valida√ß√£o"])
        
        with tab_otim:
            with st.expander("Ver dados processados para otimiza√ß√£o", expanded=False):
                st.write(f"**Dimens√µes:** {df.shape[0]} linhas x {df.shape[1]} colunas")
                st.write(f"**Per√≠odo:** {st.session_state['periodo_otimizacao']['inicio'].strftime('%d/%m/%Y')} a {st.session_state['periodo_otimizacao']['fim'].strftime('%d/%m/%Y')}")
                st.dataframe(df.head(10))
        
        with tab_valid:
            if df_analise is not None:
                with st.expander("Ver dados estendidos para valida√ß√£o", expanded=False):
                    st.write(f"**Dimens√µes:** {df_analise.shape[0]} linhas x {df_analise.shape[1]} colunas")
                    st.write(f"**Per√≠odo:** {st.session_state['periodo_analise']['inicio'].strftime('%d/%m/%Y')} a {st.session_state['periodo_analise']['fim'].strftime('%d/%m/%Y')}")
                    st.dataframe(df_analise.tail(10))
            else:
                st.info("üìç Nenhum per√≠odo de valida√ß√£o configurado")
        
        # Verificar taxa de refer√™ncia
        has_risk_free = False
        risk_free_column_name = None
        if len(df.columns) > 2 and isinstance(df.columns[1], str):
            col_name = df.columns[1].lower()
            if any(term in col_name for term in ['taxa', 'livre', 'risco', 'ibov', 'ref', 'cdi', 'selic']):
                has_risk_free = True
                risk_free_column_name = df.columns[1]
                st.info(f"üìä Taxa de refer√™ncia detectada: '{risk_free_column_name}'")
        
        # SE√á√ÉO DE OTIMIZA√á√ÉO
        st.header("üõí Sele√ß√£o de Ativos")
        
        # Identificar colunas de ativos
        if isinstance(df.columns[0], str) and 'data' in df.columns[0].lower():
            if has_risk_free:
                asset_columns = df.columns[2:].tolist()
            else:
                asset_columns = df.columns[1:].tolist()
        else:
            asset_columns = df.columns.tolist()
        
        # Verificar se h√° sele√ß√£o autom√°tica ativa
        auto_selection_active = st.session_state.get('auto_selection_active', False)
        selected_assets_auto = st.session_state.get('selected_assets_auto', [])
        
        if auto_selection_active and selected_assets_auto:
            # MODO AUTOM√ÅTICO: Aparecer como se fosse sele√ß√£o manual normal
            selected_assets = st.multiselect(
                "üéØ Selecione os ativos para otimiza√ß√£o:",
                options=asset_columns,
                default=selected_assets_auto,  # ‚Üê Usar os ativos do ranking como padr√£o
                help="M√≠nimo 2 ativos (selecionados automaticamente pelo ranking)",
                placeholder="Ativos selecionados pelo ranking..."
            )
            
            # Bot√£o discreto para resetar
            if st.button("üîÑ Resetar sele√ß√£o autom√°tica", help="Voltar ao modo manual normal"):
                st.session_state['auto_selection_active'] = False
                st.session_state['selected_assets_auto'] = []
                st.rerun()
            
        else:
            # MODO MANUAL: Sele√ß√£o tradicional
            selected_assets = st.multiselect(
                "üéØ Selecione os ativos para otimiza√ß√£o:",
                options=asset_columns,
                default=asset_columns[:min(250, len(asset_columns))],
                help="M√≠nimo 2 ativos",
                placeholder="Escolha os ativos..."
            )
        
        if len(selected_assets) < 2:
            st.warning("‚ö†Ô∏è Selecione pelo menos 2 ativos para otimiza√ß√£o")
        else:
            mode_text = "autom√°tica" if auto_selection_active else "manual"
            st.success(f"‚úÖ {len(selected_assets)} ativos selecionados ({mode_text})")
        
        # NOVA SE√á√ÉO: Short Selling / Hedge
        st.header("üîÑ Posi√ß√µes Short / Hedge (Opcional)")
        
        use_short = st.checkbox("Habilitar posi√ß√µes short/hedge", help="Permite incluir ativos com pesos negativos (venda a descoberto)")
        
        short_assets = []
        short_weights = {}
        
        if use_short:
            # Identificar ativos n√£o selecionados
            available_for_short = [asset for asset in asset_columns if asset not in selected_assets]
            
            if len(available_for_short) > 0:
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    short_assets = st.multiselect(
                        "Selecione ativos para posi√ß√£o short:",
                        options=available_for_short,
                        help="Estes ativos ter√£o pesos negativos (venda a descoberto)"
                    )
                
                if len(short_assets) > 0:
                    st.markdown("**Defina os pesos negativos:**")
                    
                    # Criar sliders para cada ativo short
                    cols = st.columns(min(3, len(short_assets)))
                    for idx, asset in enumerate(short_assets):
                        with cols[idx % 3]:
                            weight = st.slider(
                                f"{asset}",
                                min_value=-100,
                                max_value=0,
                                value=-100,
                                step=1,
                                help=f"Peso negativo para {asset} (%). -100% = venda total do ativo"
                            )
                            short_weights[asset] = weight / 100
                    
                    # Mostrar resumo
                    total_short = sum(short_weights.values())
                    st.info(f"üìä Total short: {total_short*100:.1f}% (n√£o entra na soma dos 100% do portf√≥lio)")
            else:
                st.warning("‚ö†Ô∏è Selecione menos ativos na otimiza√ß√£o para liberar op√ß√µes de short")
        
        # Configura√ß√µes de otimiza√ß√£o
        st.header("‚öôÔ∏è Configura√ß√µes da Otimiza√ß√£o")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            # Lista de objetivos com condicional
            objectives_list = [
                "Maximizar Sharpe Ratio", 
                "Maximizar Sortino Ratio",
                "Minimizar Risco", 
                "Maximizar Inclina√ß√£o", 
                "Maximizar Inclina√ß√£o/[(1-R¬≤)√óVol]"
            ]
            
            # Adicionar objetivo de excesso apenas se taxa livre foi detectada
            if has_risk_free:
                objectives_list.append("Maximizar Qualidade da Linearidade")
                objectives_list.append("Maximizar Linearidade do Excesso")
                
            objective = st.selectbox(
                "üéØ Objetivo da Otimiza√ß√£o",
                objectives_list,
                help="Escolha o que voc√™ quer otimizar"
            )
        
        with col2:
            min_weight = st.slider(
                "üìä Peso m√≠nimo por ativo (%)",
                min_value=0,
                max_value=20,
                value=0,
                step=1,
                help="Limite m√≠nimo para cada ativo no portf√≥lio (0% = sem m√≠nimo)"
            ) / 100
        
        with col3:
            max_weight = st.slider(
                "üìä Peso m√°ximo por ativo (%)",
                min_value=5,
                max_value=100,
                value=30,
                step=1,
                help="Limite m√°ximo para cada ativo no portf√≥lio"
            ) / 100
        
        with col4:
            # Inicializar otimizador para verificar taxa livre
            temp_optimizer = PortfolioOptimizer(df, [])
            
            if has_risk_free and hasattr(temp_optimizer, 'risk_free_rate_total'):
                # Mostrar taxa livre detectada como informa√ß√£o
                detected_rate = temp_optimizer.risk_free_rate_total
                st.metric(
                    "üèõÔ∏è Taxa de refer√™ncia",
                    f"{detected_rate:.2%}",
                    help="Taxa detectada automaticamente da coluna B (acumulada do per√≠odo)"
                )
                used_risk_free_rate = detected_rate
            else:
                # Campo manual se n√£o detectou
                used_risk_free_rate = st.number_input(
                    "üèõÔ∏è Taxa de refer√™ncia (%)",
                    min_value=0.0,
                    max_value=100.0,
                    value=0.0,
                    step=0.1,
                    help="Taxa de refer√™ncia ACUMULADA do per√≠odo"
                ) / 100

# NOVA SE√á√ÉO: Restri√ß√µes Individuais
        use_individual_constraints = False
        individual_constraints = {}
        
        if len(selected_assets) >= 2:
            st.header("üö´ Restri√ß√µes Individuais por Ativo (Opcional)")
            
            use_individual_constraints = st.checkbox(
                "Definir limites espec√≠ficos para alguns ativos",
                help="Permite definir pesos m√≠nimos e m√°ximos diferentes para ativos espec√≠ficos"
            )
            
            if use_individual_constraints:
                # Selecionar quais ativos ter√£o restri√ß√µes individuais
                constrained_assets = st.multiselect(
                    "Selecione os ativos com restri√ß√µes espec√≠ficas:",
                    options=selected_assets,
                    help="Escolha apenas os ativos que precisam de limites diferentes dos globais"
                )
                
                if len(constrained_assets) > 0:
                    st.markdown("**Configure os limites para cada ativo selecionado:**")
                    
                    # Criar colunas para organizar melhor
                    num_cols = min(2, len(constrained_assets))
                    if num_cols > 0:
                        cols = st.columns(num_cols)
                    
                    for idx, asset in enumerate(constrained_assets):
                        with cols[idx % num_cols] if num_cols > 0 else st.container():
                            st.markdown(f"**{asset}**")
                            
                            # Valores padr√£o baseados nos limites globais
                            default_min = min_weight * 100
                            default_max = max_weight * 100
                            
                            # Criar duas colunas para min e max lado a lado
                            col_min, col_max = st.columns(2)
                            
                            with col_min:
                                asset_min = st.number_input(
                                    "M√≠n %",
                                    min_value=0.0,
                                    max_value=100.0,
                                    value=default_min,
                                    step=0.5,
                                    key=f"min_{asset}",
                                    help=f"Peso m√≠nimo para {asset}"
                                )
                            
                            with col_max:
                                asset_max = st.number_input(
                                    "M√°x %",
                                    min_value=0.0,
                                    max_value=100.0,
                                    value=default_max,
                                    step=0.5,
                                    key=f"max_{asset}",
                                    help=f"Peso m√°ximo para {asset}"
                                )
                            
                            # Validar que min <= max
                            if asset_min > asset_max:
                                st.error(f"‚ö†Ô∏è M√≠nimo deve ser ‚â§ M√°ximo")
                                asset_min = asset_max
                            
                            # Guardar apenas os ativos com restri√ß√µes
                            individual_constraints[asset] = {
                                'min': asset_min / 100,
                                'max': asset_max / 100
                            }
                            
                            # Mostrar range visualmente
                            if asset_min == asset_max:
                                st.info(f"üîí Travado em {asset_min:.1f}%")
                            else:
                                st.caption(f"üìä Range: {asset_min:.1f}% - {asset_max:.1f}%")
                            st.markdown("---")
                    
                    # Validar se a soma dos m√≠nimos n√£o excede 100%
                    total_min = 0
                    for asset in selected_assets:
                        if asset in individual_constraints:
                            total_min += individual_constraints[asset]['min']
                        else:
                            total_min += min_weight
                    
                    if total_min > 1.0:
                        st.error(f"‚ùå Soma dos m√≠nimos ({total_min*100:.1f}%) excede 100%!")
                        st.caption("Isso inclui os ativos sem restri√ß√µes individuais usando o m√≠nimo global")
                    else:
                        st.success(f"‚úÖ Soma total dos m√≠nimos: {total_min*100:.1f}%")
                else:
                    st.info("üëÜ Selecione os ativos que precisam de limites espec√≠ficos")
        
        # Bot√£o de otimiza√ß√£o
        if st.button("üöÄ OTIMIZAR PORTF√ìLIO", type="primary", use_container_width=True):
            
            # Verificar novamente se h√° ativos suficientes
            if len(selected_assets) < 2:
                st.error("‚ùå Selecione pelo menos 2 ativos para otimiza√ß√£o")
            else:
                with st.spinner("üîÑ Otimizando... Aguarde alguns segundos"):
                    try:
                        # Preparar lista completa de ativos (selected + short)
                        all_assets = selected_assets.copy()
                        if use_short and len(short_assets) > 0:
                            all_assets.extend(short_assets)
                        
                        # Inicializar otimizador com TODOS os ativos
                        optimizer = PortfolioOptimizer(df, all_assets)
                        
                        # Usar taxa livre detectada ou manual
                        if has_risk_free and hasattr(optimizer, 'risk_free_rate_total'):
                            final_risk_free_rate = optimizer.risk_free_rate_total
                        else:
                            final_risk_free_rate = used_risk_free_rate
                        
                        # Definir tipo de objetivo
                        if objective == "Maximizar Sharpe Ratio":
                            obj_type = 'sharpe'
                        elif objective == "Maximizar Sortino Ratio":
                            obj_type = 'sortino'
                        elif objective == "Minimizar Risco":
                            obj_type = 'volatility'
                        elif objective == "Maximizar Inclina√ß√£o":
                            obj_type = 'slope'
                        elif objective == "Maximizar Inclina√ß√£o/[(1-R¬≤)√óVol]":
                            obj_type = 'hc10'
                        elif objective == "Maximizar Qualidade da Linearidade":
                            obj_type = 'quality_linear'
                        elif objective == "Maximizar Linearidade do Excesso":
                            obj_type = 'excess_hc10'
                        
                        # Preparar restri√ß√µes individuais se habilitadas
                        constraints_to_use = individual_constraints if use_individual_constraints else None
                        
                        # Executar otimiza√ß√£o
                        if use_short and len(short_assets) > 0:
                            # Otimiza√ß√£o com shorts
                            result = optimizer.optimize_portfolio_with_shorts(
                                selected_assets=selected_assets,
                                short_assets=short_assets,
                                short_weights=short_weights,
                                objective_type=obj_type,
                                max_weight=max_weight,
                                min_weight=min_weight,
                                risk_free_rate=final_risk_free_rate,
                                individual_constraints=constraints_to_use
                            )
                        else:
                            # Otimiza√ß√£o normal
                            result = optimizer.optimize_portfolio(
                                objective_type=obj_type,
                                target_return=None,
                                max_weight=max_weight,
                                min_weight=min_weight,
                                risk_free_rate=final_risk_free_rate,
                                individual_constraints=constraints_to_use
                            )
                        
                        if result['success']:
                            st.success("üéâ Otimiza√ß√£o conclu√≠da com sucesso!")
                            
                            # Salvar pesos otimizados
                            st.session_state['optimal_weights'] = result['weights']
                            st.session_state['optimization_result'] = result
                            
                            # AN√ÅLISE EM DOIS PER√çODOS
                            tabs_results = st.tabs(["üìä Per√≠odo de Otimiza√ß√£o", "üîç Per√≠odo de Valida√ß√£o", "üìà Compara√ß√£o"])
                            
                            with tabs_results[0]:
                                st.subheader("üìä Resultados no Per√≠odo de Otimiza√ß√£o (In-Sample)")
                                
                                # M√©tricas do per√≠odo de otimiza√ß√£o
                                metrics = result['metrics']
                                ref_anualiz = (1 + metrics['risk_free_rate']) ** (365 / dias_otim) - 1
                                sharpe_corrigido = (metrics['annual_return'] - ref_anualiz) / metrics['volatility'] if metrics['volatility'] > 0 else 0
                                sortino_corrigido = (metrics['annual_return'] - ref_anualiz) / metrics['downside_deviation'] if metrics['downside_deviation'] > 0 else 0
                                
                                # Primeira linha de m√©tricas
                                col1, col2, col3, col4, col5 = st.columns(5)
                                
                                with col1:
                                    st.metric(
                                        "üìà Retorno Total", 
                                        f"{metrics['gv_final']:.2%}",
                                        help="Retorno acumulado total"
                                    )
                                
                                with col2:
                                    st.metric(
                                        "üìÖ Ganho Anual", 
                                        f"{metrics['annual_return']:.2%}",
                                        help="Retorno anualizado do portf√≥lio"
                                    )
                                
                                with col3:
                                    st.metric(
                                        "üìä Volatilidade", 
                                        f"{metrics['volatility']:.2%}",
                                        help="Risco anualizado (DESVPAD.P √ó ‚àö252)"
                                    )
                                
                                with col4:
                                    st.metric(
                                        "‚ö° Sharpe Ratio", 
                                        f"{sharpe_corrigido:.3f}",
                                        help=f"(Retorno Total - Taxa de refer√™ncia) / Volatilidade\nTaxa de refer√™ncia usada: {metrics['risk_free_rate']:.2%}"
                                    )
                                
                                with col5:
                                    st.metric(
                                        "üî• Sortino Ratio", 
                                        f"{sortino_corrigido:.3f}",
                                        help="Similar ao Sharpe, mas considera apenas volatilidade negativa"
                                    )
                                
                                # Segunda linha - M√©tricas de risco
                                st.subheader("üìä M√©tricas de Risco")
                                col1, col2, col3, col4, col5 = st.columns(5)
                                
                                with col1:
                                    st.metric(
                                        "üìà R¬≤", 
                                        f"{metrics['r_squared']:.3f}",
                                        help="Qualidade da linearidade da tend√™ncia"
                                    )
                                
                                with col2:
                                    st.metric(
                                        "‚ö†Ô∏è VaR 95% (Di√°rio)", 
                                        f"{metrics['var_95_daily']:.2%}",
                                        help="Perda m√°xima esperada em 95% dos dias"
                                    )
                                
                                with col3:
                                    st.metric(
                                        "üìâ CVaR 95% (Di√°rio)", 
                                        f"{metrics['cvar_95_daily']:.2%}",
                                        help="Perda m√©dia nos 5% piores dias"
                                    )
                                
                                with col4:
                                    st.metric(
                                        "üèõÔ∏è Taxa Ref", 
                                        f"{metrics['risk_free_rate']:.2%}",
                                        help="Taxa de refer√™ncia acumulada"
                                    )
                                
                                with col5:
                                    st.metric(
                                        "üìà Excesso", 
                                        f"{metrics['excess_return']:.2%}",
                                        help="Retorno Total - Taxa de refer√™ncia"
                                    )
                                
                                # Composi√ß√£o do portf√≥lio
                                st.subheader("üìä Composi√ß√£o do Portf√≥lio Otimizado")
                                
                                portfolio_df = optimizer.get_portfolio_summary(result['weights'])
                                
                                #col1, col2 = st.columns([1, 1])
                                
                                #with col1:
                                st.subheader("üìã Tabela de Pesos")
                                portfolio_display = portfolio_df.copy()
                                portfolio_display['Peso Inicial (%)'] = portfolio_display['Peso Inicial (%)'].apply(lambda x: f"{x:.2f}%")
                                portfolio_display['Peso Atual (%)'] = portfolio_display['Peso Atual (%)'].apply(lambda x: f"{x:.2f}%")
                                
                                st.dataframe(portfolio_display, use_container_width=True, hide_index=True)
                                
                                # Mostrar totais
                                total_initial = portfolio_df['Peso Inicial (%)'].sum()
                                total_current = portfolio_df['Peso Atual (%)'].sum()
                                
                                col_total1, col_total2 = st.columns(2)
                                with col_total1:
                                    st.info(f"‚úÖ Total inicial: {total_initial:.1f}%")
                                with col_total2:
                                    st.info(f"üîÑ Total atual: {total_current:.1f}%")

                                # Tabela mensal - Per√≠odo de Otimiza√ß√£o
                                if hasattr(optimizer, 'dates'):
                                    st.subheader("üìÖ Performance Mensal - Per√≠odo de Otimiza√ß√£o")
                                    
                                    try:
                                        monthly_table, excess_table = create_monthly_returns_table(
                                            optimizer.returns_data,  # Dados s√≥ da otimiza√ß√£o
                                            result['weights'],
                                            optimizer.dates,        # Datas s√≥ da otimiza√ß√£o
                                            getattr(optimizer, 'risk_free_returns', None)
                                        )
                                        
                                        # Fun√ß√£o para colorir valores
                                        def color_negative_red(val):
                                            if val == "-" or pd.isna(val):
                                                return 'color: gray'
                                            try:
                                                if isinstance(val, str) and '%' in val:
                                                    numeric_val = float(val.replace('%', '')) / 100
                                                else:
                                                    numeric_val = float(val)
                                                
                                                if numeric_val < 0:
                                                    return 'color: red; font-weight: bold'
                                                elif numeric_val > 0:
                                                    return 'color: green; font-weight: bold'
                                                else:
                                                    return 'color: black'
                                            except:
                                                return 'color: black'
                                        
                                        # Mostrar tabela mensal
                                        monthly_display = monthly_table.copy()
                                        for col in monthly_display.columns:
                                            monthly_display[col] = monthly_display[col].apply(
                                                lambda x: f"{x:.2%}" if pd.notna(x) else "-"
                                            )
                                        
                                        styled_table = monthly_display.style.applymap(color_negative_red)
                                        st.dataframe(styled_table, use_container_width=True)
                                        
                                        st.caption("üí° Esta tabela mostra apenas o per√≠odo de otimiza√ß√£o (treino)")
                                        
                                    except Exception as e:
                                        st.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel gerar tabelas mensais: {str(e)}")
                                
                                # Gr√°fico de evolu√ß√£o
                                st.subheader("üìà Evolu√ß√£o do Portf√≥lio - Per√≠odo de Otimiza√ß√£o")
                                
                                # Buscar datas do otimizador
                                dates = getattr(optimizer, 'dates', None)
                                
                                # Criar DataFrame para o gr√°fico
                                periods = range(1, len(metrics['portfolio_cumulative']) + 1)
                                
                                # Criar figura com m√∫ltiplas linhas
                                fig_line = go.Figure()
                                
                                # Linha do portf√≥lio
                                fig_line.add_trace(go.Scatter(
                                    x=pd.to_datetime(dates).dt.strftime('%d/%m/%Y') if dates is not None else list(periods),
                                    y=metrics['portfolio_cumulative'] * 100,
                                    mode='lines',
                                    name='Portf√≥lio Otimizado',
                                    line=dict(color='#1f77b4', width=2.5)
                                ))
                                
                                # Se temos taxa livre, adicionar linha
                                if hasattr(optimizer, 'risk_free_cumulative') and optimizer.risk_free_cumulative is not None:
                                    fig_line.add_trace(go.Scatter(
                                        x=pd.to_datetime(dates).dt.strftime('%d/%m/%Y') if dates is not None else list(periods),
                                        y=optimizer.risk_free_cumulative * 100,
                                        mode='lines',
                                        name='Taxa de Refer√™ncia',
                                        line=dict(color='#ff7f0e', width=2, dash='dash')
                                    ))
                                    
                                    # Adicionar linha de excesso de retorno
                                    excess_cumulative = metrics['portfolio_cumulative'] - optimizer.risk_free_cumulative.values
                                    fig_line.add_trace(go.Scatter(
                                        x=pd.to_datetime(dates).dt.strftime('%d/%m/%Y') if dates is not None else list(periods),
                                        y=excess_cumulative * 100,
                                        mode='lines',
                                        name='Excesso de Retorno',
                                        line=dict(color='#2ca02c', width=2, dash='dot')
                                    ))
                                
                                # Personalizar layout
                                fig_line.update_layout(
                                    title='Evolu√ß√£o do Retorno Acumulado',
                                    xaxis_title='Per√≠odo',
                                    yaxis_title='Retorno Acumulado (%)',
                                    hovermode='x unified',
                                    height=500,
                                    showlegend=True,
                                    legend=dict(
                                        yanchor="top",
                                        y=0.99,
                                        xanchor="left",
                                        x=0.01
                                    ),
                                    xaxis=dict(
                                        showgrid=True, 
                                        gridwidth=1, 
                                        gridcolor='rgba(128,128,128,0.2)',
                                        nticks=12  # ‚Üê NOVO: Limita a 10 datas no m√°ximo
                                    ),
                                    yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(128,128,128,0.2)')
                                )

                                
                                st.plotly_chart(fig_line, use_container_width=True)
                
                          
                            with tabs_results[1]:
                                if df_analise is not None:
                                    st.subheader("üîç Resultados no Per√≠odo de Valida√ß√£o (Out-of-Sample)")
                                    
                                    # Aplicar pesos otimizados no per√≠odo estendido
                                    with st.spinner("Calculando performance no per√≠odo de valida√ß√£o..."):
                                        try:
                                            # CORRE√á√ÉO PARA SHORTS: Verificar quais ativos foram usados na otimiza√ß√£o
                                            
                                            # Determinar lista de ativos usados na otimiza√ß√£o
                                            if use_short and len(short_assets) > 0:
                                                # Com shorts: todos os ativos (selected + short)
                                                assets_used_in_optimization = selected_assets + short_assets
                                            else:
                                                # Sem shorts: apenas selected
                                                assets_used_in_optimization = selected_assets
                                            
                                            # Criar novo otimizador com dados estendidos E OS MESMOS ATIVOS
                                            optimizer_valid = PortfolioOptimizer(df_analise, assets_used_in_optimization)
                                            
                                            # Verificar se todos os ativos existem no per√≠odo de valida√ß√£o
                                            missing_assets = []
                                            for asset in assets_used_in_optimization:
                                                if asset not in df_analise.columns:
                                                    missing_assets.append(asset)
                                                    st.warning(f"‚ö†Ô∏è Ativo {asset} n√£o encontrado no per√≠odo de valida√ß√£o")
                                            
                                            # Se faltar algum ativo, ajustar
                                            if missing_assets:
                                                st.error(f"‚ùå Ativos faltantes no per√≠odo de valida√ß√£o: {', '.join(missing_assets)}")
                                                st.info("üí° N√£o √© poss√≠vel calcular valida√ß√£o com ativos faltantes")
                                            else:
                                                # VERIFICA√á√ÉO DE DIMENS√ïES
                                                n_assets_optimization = len(result['weights'])
                                                n_assets_validation = optimizer_valid.returns_data.shape[1] if len(optimizer_valid.returns_data.shape) > 1 else 1
                                                
                                                st.info(f"üìä Debug: Otimiza√ß√£o com {n_assets_optimization} ativos, Valida√ß√£o com {n_assets_validation} ativos")
                                                
                                                if n_assets_optimization != n_assets_validation:
                                                    st.error(f"‚ùå Incompatibilidade: {n_assets_optimization} pesos vs {n_assets_validation} ativos")
                                                    
                                                    # Tentar ajustar pesos se poss√≠vel
                                                    if n_assets_optimization > n_assets_validation:
                                                        st.warning("‚ö†Ô∏è Alguns ativos da otimiza√ß√£o n√£o est√£o dispon√≠veis na valida√ß√£o")
                                                        # Podemos tentar usar apenas os pesos dos ativos dispon√≠veis
                                                        # mas isso alteraria a aloca√ß√£o total
                                                    else:
                                                        st.warning("‚ö†Ô∏è H√° mais ativos na valida√ß√£o do que na otimiza√ß√£o")
                                                else:
                                                    # Calcular m√©tricas com os pesos j√° otimizados
                                                    portfolio_returns_valid = np.dot(optimizer_valid.returns_data.values, result['weights'])
                                                    cumulative_valid = np.cumsum(portfolio_returns_valid)
                                                    
                                                    # Separar per√≠odos
                                                    periodo_otim = st.session_state['periodo_otimizacao']
                                                    n_dias_otim = len(optimizer.returns_data)
                                                    
                                                    # M√©tricas apenas do per√≠odo de valida√ß√£o
                                                    if len(portfolio_returns_valid) > n_dias_otim:
                                                        returns_valid_only = portfolio_returns_valid[n_dias_otim:]
                                                        cumulative_valid_only = np.cumsum(returns_valid_only)
                                                    else:
                                                        # Se n√£o h√° dados suficientes para valida√ß√£o
                                                        st.warning("‚ö†Ô∏è Per√≠odo de valida√ß√£o muito curto")
                                                        returns_valid_only = portfolio_returns_valid
                                                        cumulative_valid_only = cumulative_valid
                                                    
                                                    # ‚úÖ CALCULAR M√âTRICAS DE VALIDA√á√ÉO - METODOLOGIA BASE 0 CORRIGIDA

                                                    # ADICIONAR ESTA LINHA NO IN√çCIO:
                                                    returns_valid_only = portfolio_returns_valid[n_dias_otim:]  # Retornos di√°rios do per√≠odo
                                                    n_dias_valid = len(returns_valid_only)  # ‚Üê ADICIONAR ESTA LINHA

                                                    # 1. RETORNO DO PORTF√ìLIO - CRESCIMENTO RELATIVO (BASE 0)
                                                    # Retorno acumulado desde in√≠cio at√© fim da valida√ß√£o
                                                    portfolio_total_ate_validacao = cumulative_valid[-1]  # √öltimo ponto da curva completa

                                                    # Retorno acumulado desde in√≠cio at√© fim da otimiza√ß√£o
                                                    portfolio_total_ate_otimizacao = cumulative_valid[n_dias_otim-1]  # Ponto no fim da otimiza√ß√£o

                                                    # Crescimento no per√≠odo de valida√ß√£o (base 0)
                                                    retorno_total_valid = (1 + portfolio_total_ate_validacao) / (1 + portfolio_total_ate_otimizacao) - 1

                                                    # Anualizar usando dias corridos
                                                    if dias_valid > 0:
                                                        annual_return_valid = (1 + retorno_total_valid) ** (365/dias_valid) - 1
                                                    else:
                                                        annual_return_valid = 0

                                                    # 2. VOLATILIDADE ANUALIZADA - METODOLOGIA VARIAC_RESULT_PU (igual ao otimizador)
                                                    # Pegar retornos acumulados do per√≠odo de valida√ß√£o
                                                    portfolio_cumulative_validacao = cumulative_valid[n_dias_otim-1:]  # Desde fim otimiza√ß√£o

                                                    if len(portfolio_cumulative_validacao) > 1:
                                                        # Adicionar ponto inicial para calcular varia√ß√£o
                                                        portfolio_cumulative_with_zero = np.concatenate([[portfolio_cumulative_validacao[0]], portfolio_cumulative_validacao])
                                                        
                                                        # Calcular Variac_Result_PU (igual ao otimizador)
                                                        variac_result_pu = (1 + portfolio_cumulative_with_zero[1:]) / (1 + portfolio_cumulative_with_zero[:-1])
                                                        
                                                        # Retornos percentuais di√°rios
                                                        portfolio_returns_pct_valid = variac_result_pu - 1
                                                        
                                                        # Volatilidade anualizada correta (mesma metodologia do otimizador)
                                                        vol_valid = np.std(portfolio_returns_pct_valid, ddof=0) * np.sqrt(252)
                                                    else:
                                                        vol_valid = 0

                                                    # 3. TAXA LIVRE DE RISCO - CRESCIMENTO RELATIVO (BASE 0)
                                                    if hasattr(optimizer_valid, 'risk_free_cumulative') and optimizer_valid.risk_free_cumulative is not None:
                                                        try:
                                                            # Taxa acumulada desde in√≠cio at√© fim da valida√ß√£o
                                                            risk_free_total_ate_validacao = optimizer_valid.risk_free_cumulative.iloc[-1]
                                                            
                                                            # Taxa acumulada desde in√≠cio at√© fim da otimiza√ß√£o  
                                                            risk_free_total_ate_otimizacao = optimizer_valid.risk_free_cumulative.iloc[n_dias_otim-1]
                                                            
                                                            # Crescimento no per√≠odo de valida√ß√£o (base 0)
                                                            risk_free_total_valid = (1 + risk_free_total_ate_validacao) / (1 + risk_free_total_ate_otimizacao) - 1
                                                            
                                                            # Anualizar usando dias corridos
                                                            if dias_valid > 0:
                                                                risk_free_annual_valid = (1 + risk_free_total_valid) ** (365/dias_valid) - 1
                                                            else:
                                                                risk_free_annual_valid = 0
                                                                
                                                        except Exception as e:
                                                            st.warning(f"‚ö†Ô∏è Erro ao calcular taxa livre: {str(e)}")
                                                            risk_free_annual_valid = 0

                                                    # Op√ß√£o B: Taxa livre manual ou estimada
                                                    else:
                                                        # Se temos uma taxa acumulada do per√≠odo de otimiza√ß√£o
                                                        if final_risk_free_rate > 0 and dias_valid > 0:
                                                            # Estimar crescimento proporcional
                                                            periodo_otim_dias = (data_fim_otim - data_inicio_otim).days
                                                            if periodo_otim_dias > 0:
                                                                # Taxa anual base
                                                                taxa_anual_base = (1 + final_risk_free_rate) ** (365/periodo_otim_dias) - 1
                                                                # Aplicar ao per√≠odo de valida√ß√£o
                                                                risk_free_annual_valid = taxa_anual_base
                                                            else:
                                                                risk_free_annual_valid = 0
                                                        else:
                                                            risk_free_annual_valid = 0
                                                    
                                                    # 4. SHARPE RATIO CORRIGIDO
                                                    if vol_valid > 0:
                                                        sharpe_valid = (annual_return_valid - risk_free_annual_valid) / vol_valid
                                                    else:
                                                        sharpe_valid = 0
                                                    
                                                    # ‚úÖ SORTINO CORRIGIDO:
                                                    negative_returns_valid = portfolio_returns_pct_valid[portfolio_returns_pct_valid < 0]  # ‚Üê USAR ESTA!
                                                    if len(negative_returns_valid) > 0:
                                                        downside_dev_valid = np.std(negative_returns_valid, ddof=0) * np.sqrt(252)
                                                        if downside_dev_valid > 0:
                                                            sortino_valid = (annual_return_valid - risk_free_annual_valid) / downside_dev_valid
                                                        else:
                                                            sortino_valid = sharpe_valid
                                                    else:
                                                        sortino_valid = sharpe_valid
                                                    
                                                    # DEBUG: Mostrar componentes do c√°lculo
                                                    with st.expander("üîç Detalhes dos C√°lculos de Valida√ß√£o", expanded=False):
                                                        col_debug1, col_debug2, col_debug3 = st.columns(3)
                                                        
                                                        with col_debug1:
                                                            st.markdown("**Retornos:**")
                                                            st.write(f"‚Ä¢ Total: {retorno_total_valid:.2%}")
                                                            st.write(f"‚Ä¢ Anualizado: {annual_return_valid:.2%}")
                                                            st.write(f"‚Ä¢ Dias: {dias_valid}")
                                                        
                                                        with col_debug2:
                                                            st.markdown("**Risco:**")
                                                            st.write(f"‚Ä¢ Vol Anual: {vol_valid:.2%}")
                                                            st.write(f"‚Ä¢ Downside Dev: {downside_dev_valid:.2%}" if 'downside_dev_valid' in locals() else "‚Ä¢ Downside: N/A")
                                                        
                                                        with col_debug3:
                                                            st.markdown("**Taxa Livre:**")
                                                            st.write(f"‚Ä¢ Anualizada: {risk_free_annual_valid:.2%}")
                                                            st.write(f"‚Ä¢ Excesso: {(annual_return_valid - risk_free_annual_valid):.2%}")
                                                    
                                                    # Mostrar m√©tricas de valida√ß√£o
                                                    col1, col2, col3, col4, col5 = st.columns(5)
                                                    
                                                    with col1:
                                                        st.metric("üìà Retorno Total", f"{retorno_total_valid:.2%}",
                                                                help=f"Retorno acumulado dos {dias_valid} dias de valida√ß√£o")
                                                    with col2:
                                                        st.metric("üìÖ Retorno Anual", f"{annual_return_valid:.2%}",
                                                                help="Retorno anualizado do per√≠odo de valida√ß√£o")
                                                    with col3:
                                                        st.metric("üìä Volatilidade", f"{vol_valid:.2%}",
                                                                help="Volatilidade anualizada")
                                                    with col4:
                                                        st.metric("‚ö° Sharpe Ratio", f"{sharpe_valid:.3f}",
                                                                help=f"(Ret.Anual {annual_return_valid:.1%} - Taxa {risk_free_annual_valid:.1%}) / Vol {vol_valid:.1%}")
                                                    with col5:
                                                        st.metric("üî• Sortino Ratio", f"{sortino_valid:.3f}",
                                                                help="Similar ao Sharpe mas usa apenas volatilidade negativa")
                                                    

                                                    
                                        except Exception as e:
                                            st.error(f"‚ùå Erro na valida√ß√£o: {str(e)}")
                                            st.info("üí° Verifique se todos os ativos t√™m dados no per√≠odo de valida√ß√£o")
 
    # TABELA MENSAL COMPLETA (Otimiza√ß√£o + Valida√ß√£o)
                                        st.subheader("üìÖ Performance Mensal - Per√≠odo Completo")
                                        
                                        try:
                                            # VERIFICAR SE EXISTE OTIMIZADOR DE VALIDA√á√ÉO
                                            if 'optimizer_valid' in locals() and hasattr(optimizer_valid, 'returns_data'):
                                                # Usar dados COMPLETOS do per√≠odo estendido
                                                optimizer_to_use = optimizer_valid
                                                period_label = "Per√≠odo Completo (Otimiza√ß√£o + Valida√ß√£o)"
                                            else:
                                                # Usar dados apenas do per√≠odo de otimiza√ß√£o
                                                optimizer_to_use = optimizer
                                                period_label = "Per√≠odo de Otimiza√ß√£o"
                                                st.info("üìç Mostrando apenas per√≠odo de otimiza√ß√£o (configure valida√ß√£o para ver per√≠odo completo)")
                                            
                                            # Usar dados do otimizador apropriado
                                            monthly_table_complete, excess_table_complete = create_monthly_returns_table(
                                                optimizer_to_use.returns_data,     # Dados apropriados
                                                result['weights'],                  # Pesos otimizados
                                                optimizer_to_use.dates,           # Datas apropriadas
                                                getattr(optimizer_to_use, 'risk_free_returns', None)
                                            )
                                            
                                            # Fun√ß√£o para colorir valores negativos
                                            def color_monthly_values(val):
                                                if val == "-" or pd.isna(val):
                                                    return 'color: gray'
                                                try:
                                                    if isinstance(val, str) and '%' in val:
                                                        numeric_val = float(val.replace('%', '')) / 100
                                                    else:
                                                        numeric_val = float(val)
                                                    
                                                    if numeric_val < 0:
                                                        return 'color: red; font-weight: bold'
                                                    elif numeric_val > 0:
                                                        return 'color: green; font-weight: bold'
                                                    else:
                                                        return 'color: black'
                                                except:
                                                    return 'color: black'
                                            
                                            # Preparar tabela para exibi√ß√£o
                                            monthly_display_complete = monthly_table_complete.copy()
                                            for col in monthly_display_complete.columns:
                                                monthly_display_complete[col] = monthly_display_complete[col].apply(
                                                    lambda x: f"{x:.2%}" if pd.notna(x) else "-"
                                                )
                                            
                                            # Aplicar estilo
                                            styled_monthly_complete = monthly_display_complete.style.applymap(color_monthly_values)
                                            
                                            # Informa√ß√µes do per√≠odo
                                            if 'optimizer_valid' in locals() and hasattr(optimizer_valid, 'returns_data'):
                                                # Com valida√ß√£o
                                                periodo_otim = st.session_state['periodo_otimizacao']
                                                periodo_analise = st.session_state['periodo_analise']
                                                
                                                col_info1, col_info2 = st.columns(2)
                                                with col_info1:
                                                    st.info(f"üìä **Per√≠odo:** {periodo_otim['inicio'].strftime('%d/%m/%Y')} a {periodo_analise['fim'].strftime('%d/%m/%Y')}")
                                                with col_info2:
                                                    st.info(f"üîç **Incluindo:** Otimiza√ß√£o + Valida√ß√£o (per√≠odo completo)")
                                            else:
                                                # Sem valida√ß√£o
                                                periodo_otim = st.session_state['periodo_otimizacao']
                                                
                                                col_info1, col_info2 = st.columns(2)
                                                with col_info1:
                                                    st.info(f"üìä **Per√≠odo:** {periodo_otim['inicio'].strftime('%d/%m/%Y')} a {periodo_otim['fim'].strftime('%d/%m/%Y')}")
                                                with col_info2:
                                                    st.warning(f"‚ö†Ô∏è **Apenas:** Per√≠odo de otimiza√ß√£o")
                                            
                                            # Mostrar tabela
                                            st.dataframe(styled_monthly_complete, use_container_width=True)
                                            
                                            # Nota explicativa condicional
                                            if 'optimizer_valid' in locals() and hasattr(optimizer_valid, 'returns_data'):
                                                st.caption("üí° Esta tabela mostra a performance mensal durante todo o per√≠odo analisado (treino + teste)")
                                            else:
                                                st.caption("üí° Esta tabela mostra apenas o per√≠odo de otimiza√ß√£o (configure valida√ß√£o para ver per√≠odo completo)")
                                            
                                        except Exception as e:
                                            st.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel gerar tabela mensal: {str(e)}")
                                            st.info("üí° Verifique se h√° dados suficientes no per√≠odo selecionado") 
                                        
                                        # Gr√°fico comparativo
                                        st.subheader("üìà Evolu√ß√£o do Portf√≥lio - Per√≠odo Completo")
                                        
                                        # VERIFICAR SE H√Å DADOS DE VALIDA√á√ÉO
                                        if df_analise is not None:
                                            # Usar dados estendidos se dispon√≠veis
                                            if use_short and len(short_assets) > 0:
                                                assets_used_in_optimization = selected_assets + short_assets
                                            else:
                                                assets_used_in_optimization = selected_assets
                                            
                                            try:
                                                # Criar otimizador com dados completos
                                                optimizer_extended = PortfolioOptimizer(df_analise, assets_used_in_optimization)
                                                
                                                # Calcular m√©tricas com per√≠odo completo
                                                metrics_extended = optimizer_extended.calculate_portfolio_metrics(result['weights'], final_risk_free_rate)
                                                
                                                # Buscar datas completas
                                                dates_extended = getattr(optimizer_extended, 'dates', None)
                                                
                                                # Determinar ponto de divis√£o (fim da otimiza√ß√£o)
                                                n_dias_otim = len(optimizer.returns_data)
                                                
                                                # Criar figura com m√∫ltiplas linhas
                                                fig_extended = go.Figure()
                                                
                                                # 1. LINHA DO PORTF√ìLIO (per√≠odo completo)
                                                fig_extended.add_trace(go.Scatter(
                                                    x=pd.to_datetime(dates_extended).dt.strftime('%d/%m/%Y') if dates_extended is not None else list(range(len(metrics_extended['portfolio_cumulative']))),
                                                    y=metrics_extended['portfolio_cumulative'] * 100,
                                                    mode='lines',
                                                    name='Portf√≥lio Otimizado',
                                                    line=dict(color='#1f77b4', width=2.5)
                                                ))
                                                
                                                # 2. LINHA DA TAXA DE REFER√äNCIA (se existir)
                                                if hasattr(optimizer_extended, 'risk_free_cumulative') and optimizer_extended.risk_free_cumulative is not None:
                                                    fig_extended.add_trace(go.Scatter(
                                                        x=pd.to_datetime(dates_extended).dt.strftime('%d/%m/%Y') if dates_extended is not None else list(range(len(metrics_extended['portfolio_cumulative']))),
                                                        y=optimizer_extended.risk_free_cumulative * 100,
                                                        mode='lines',
                                                        name='Taxa de Refer√™ncia',
                                                        line=dict(color='#ff7f0e', width=2, dash='dash')
                                                    ))
                                                    
                                                    # 3. LINHA DO EXCESSO DE RETORNO
                                                    if metrics_extended.get('excess_cumulative') is not None:
                                                        fig_extended.add_trace(go.Scatter(
                                                            x=pd.to_datetime(dates_extended).dt.strftime('%d/%m/%Y') if dates_extended is not None else list(range(len(metrics_extended['portfolio_cumulative']))),
                                                            y=metrics_extended['excess_cumulative'] * 100,
                                                            mode='lines',
                                                            name='Excesso de Retorno',
                                                            line=dict(color='#2ca02c', width=2, dash='dot')
                                                        ))
                                                
                                                # 4. LINHA VERTICAL - Fim da Otimiza√ß√£o
                                                fig_extended.add_vline(
                                                    x=n_dias_otim-1,  # √çndice do √∫ltimo dia de otimiza√ß√£o
                                                    line_dash="solid",
                                                    line_color="red",
                                                    line_width=2,
                                                    annotation_text="Fim da Otimiza√ß√£o",
                                                    annotation_position="top"
                                                )
                                                
                                                # 5. √ÅREAS SOMBREADAS (sem textos internos)
                                                # √Årea de Otimiza√ß√£o (verde claro)
                                                fig_extended.add_vrect(
                                                    x0=0, 
                                                    x1=n_dias_otim-1,
                                                    fillcolor="green", 
                                                    opacity=0.1
                                                )
                                                
                                                # √Årea de Valida√ß√£o (azul claro)
                                                if len(metrics_extended['portfolio_cumulative']) > n_dias_otim:
                                                    fig_extended.add_vrect(
                                                        x0=n_dias_otim-1, 
                                                        x1=len(metrics_extended['portfolio_cumulative'])-1,
                                                        fillcolor="blue", 
                                                        opacity=0.1
                                                    )
                                                
                                                # 6. PERSONALIZAR LAYOUT
                                                fig_extended.update_layout(
                                                    title='Evolu√ß√£o do Retorno Acumulado - Vis√£o Completa (In-Sample + Out-of-Sample)',
                                                    xaxis_title='Per√≠odo',
                                                    yaxis_title='Retorno Acumulado (%)',
                                                    hovermode='x unified',
                                                    height=500,
                                                    showlegend=True,
                                                    legend=dict(
                                                        yanchor="top",
                                                        y=0.99,
                                                        xanchor="left",
                                                        x=0.01
                                                    ),
                                                    # CONFIGURAR EIXO X: m√°ximo 12 pontos
                                                    xaxis=dict(
                                                        nticks=12  # M√°ximo 12 marca√ß√µes, sem inclina√ß√£o
                                                    )
                                                )
                                                
                                                # 7. MOSTRAR GR√ÅFICO
                                                st.plotly_chart(fig_extended, use_container_width=True)
                                                
                                                # 8. INFORMA√á√ïES ADICIONAIS
                                                col_graf1, col_graf2, col_graf3 = st.columns(3)
                                                
                                                with col_graf1:
                                                    st.success(f"üéØ **Per√≠odo de Otimiza√ß√£o:** {n_dias_otim} dias")
                                                
                                                with col_graf2:
                                                    dias_validacao = dias_valid
                                                    st.info(f"üîç **Per√≠odo de Valida√ß√£o:** {dias_validacao} dias")
                                                
                                                with col_graf3:
                                                    total_dias = len(metrics_extended['portfolio_cumulative'])
                                                    st.metric("üìä Total de Registros", f"{total_dias}")
                                                
                                                # 9. NOTA EXPLICATIVA
                                                st.caption("üí° Este gr√°fico mostra a evolu√ß√£o completa do portf√≥lio, destacando visualmente onde termina o treino e come√ßa a valida√ß√£o")
                                                
                                            except Exception as e:
                                                st.error(f"‚ùå Erro ao criar gr√°fico estendido: {str(e)}")
                                                st.info("üí° Usando gr√°fico do per√≠odo de otimiza√ß√£o apenas")
                                                
                                                # FALLBACK: Gr√°fico original se der erro
                                                dates = getattr(optimizer, 'dates', None)
                                                periods = range(1, len(metrics['portfolio_cumulative']) + 1)
                                                
                                                fig_line = go.Figure()
                                                
                                                fig_line.add_trace(go.Scatter(
                                                    x=pd.to_datetime(dates).dt.strftime('%d/%m/%Y') if dates is not None else list(periods),
                                                    y=metrics['portfolio_cumulative'] * 100,
                                                    mode='lines',
                                                    name='Portf√≥lio Otimizado',
                                                    line=dict(color='#1f77b4', width=2.5)
                                                ))
                                                
                                                if hasattr(optimizer, 'risk_free_cumulative') and optimizer.risk_free_cumulative is not None:
                                                    fig_line.add_trace(go.Scatter(
                                                        x=pd.to_datetime(dates).dt.strftime('%d/%m/%Y') if dates is not None else list(periods),
                                                        y=optimizer.risk_free_cumulative * 100,
                                                        mode='lines',
                                                        name='Taxa de Refer√™ncia',
                                                        line=dict(color='#ff7f0e', width=2, dash='dash')
                                                    ))
                                                    
                                                    excess_cumulative = metrics['portfolio_cumulative'] - optimizer.risk_free_cumulative.values
                                                    fig_line.add_trace(go.Scatter(
                                                        x=pd.to_datetime(dates).dt.strftime('%d/%m/%Y') if dates is not None else list(periods),
                                                        y=excess_cumulative * 100,
                                                        mode='lines',
                                                        name='Excesso de Retorno',
                                                        line=dict(color='#2ca02c', width=2, dash='dot')
                                                    ))
                                                
                                                fig_line.update_layout(
                                                    title='Evolu√ß√£o do Retorno Acumulado - Per√≠odo de Otimiza√ß√£o',
                                                    xaxis_title='Per√≠odo',
                                                    yaxis_title='Retorno Acumulado (%)',
                                                    hovermode='x unified',
                                                    height=500,
                                                    showlegend=True
                                                )
                                                
                                                st.plotly_chart(fig_line, use_container_width=True)
                                        
                                        else:
                                            # SE N√ÉO H√Å DADOS DE VALIDA√á√ÉO: Gr√°fico original
                                            dates = getattr(optimizer, 'dates', None)
                                            periods = range(1, len(metrics['portfolio_cumulative']) + 1)
                                            
                                            fig_line = go.Figure()
                                            
                                            fig_line.add_trace(go.Scatter(
                                                x=pd.to_datetime(dates).dt.strftime('%d/%m/%Y') if dates is not None else list(periods),
                                                y=metrics['portfolio_cumulative'] * 100,
                                                mode='lines',
                                                name='Portf√≥lio Otimizado',
                                                line=dict(color='#1f77b4', width=2.5)
                                            ))
                                            
                                            if hasattr(optimizer, 'risk_free_cumulative') and optimizer.risk_free_cumulative is not None:
                                                fig_line.add_trace(go.Scatter(
                                                    x=pd.to_datetime(dates).dt.strftime('%d/%m/%Y') if dates is not None else list(periods),
                                                    y=optimizer.risk_free_cumulative * 100,
                                                    mode='lines',
                                                    name='Taxa de Refer√™ncia',
                                                    line=dict(color='#ff7f0e', width=2, dash='dash')
                                                ))
                                                
                                                excess_cumulative = metrics['portfolio_cumulative'] - optimizer.risk_free_cumulative.values
                                                fig_line.add_trace(go.Scatter(
                                                    x=pd.to_datetime(dates).dt.strftime('%d/%m/%Y') if dates is not None else list(periods),
                                                    y=excess_cumulative * 100,
                                                    mode='lines',
                                                    name='Excesso de Retorno',
                                                    line=dict(color='#2ca02c', width=2, dash='dot')
                                                ))
                                            
                                            fig_line.update_layout(
                                                title='Evolu√ß√£o do Retorno Acumulado - Per√≠odo de Otimiza√ß√£o Apenas',
                                                xaxis_title='Per√≠odo',
                                                yaxis_title='Retorno Acumulado (%)',
                                                hovermode='x unified',
                                                height=500,
                                                showlegend=True
                                            )
                                            
                                            st.plotly_chart(fig_line, use_container_width=True)
                                            st.info("üìç Configure um per√≠odo de valida√ß√£o para ver o gr√°fico estendido")



                                else:
                                    st.info("üìç Configure um per√≠odo de valida√ß√£o para ver resultados out-of-sample")
                            
                            with tabs_results[2]:
                                if df_analise is not None and 'retorno_total_valid' in locals():
                                    st.subheader("üìä Compara√ß√£o: Otimiza√ß√£o vs Valida√ß√£o")
                                    
                                    # Criar DataFrame comparativo
                                    comparison_data = {
                                        'M√©trica': ['Retorno Anual (%)', 'Volatilidade (%)'],
                                        'Otimiza√ß√£o (In-Sample)': [
                                            f"{metrics['annual_return']*100:.2f}",
                                            f"{metrics['volatility']*100:.2f}",
                                        ],
                                        'Valida√ß√£o (Out-of-Sample)': [
                                            f"{annual_return_valid*100:.2f}",
                                            f"{vol_valid*100:.2f}",
                                        ],
                                        'Diferen√ßa': [
                                            f"{(annual_return_valid - metrics['annual_return'])*100:.2f}",
                                            f"{(vol_valid - metrics['volatility'])*100:.2f}",
                                        ]
                                    }
                                    
                                    df_comparison = pd.DataFrame(comparison_data)
                                    
                                    # Aplicar cores condicionais
                                    def highlight_diff(val):
                                        try:
                                            num = float(val)
                                            if num > 0:
                                                return 'color: green'
                                            elif num < 0:
                                                return 'color: red'
                                        except:
                                            pass
                                        return ''
                                    
                                    styled_df = df_comparison.style.applymap(
                                        highlight_diff, 
                                        subset=['Diferen√ßa']
                                    )
                                    
                                    st.dataframe(styled_df, use_container_width=True)

                                else:
                                    st.info("üìç Configure um per√≠odo de valida√ß√£o para comparar resultados")
                            
                        else:
                            st.error(f"‚ùå {result['message']}")
                            st.info("üí° Tente ajustar os par√¢metros da otimiza√ß√£o")
                    
                    except Exception as e:
                        st.error(f"‚ùå Erro durante a otimiza√ß√£o: {str(e)}")
                        st.info("üí° Verifique se os dados est√£o no formato correto")

else:
    # Mensagem quando n√£o h√° dados
    st.info("üëà Fa√ßa upload de uma planilha Excel para come√ßar")
    
    # Verificar se GitHub est√° configurado
    if GITHUB_USER == "SEU_USUARIO_GITHUB":
        st.warning(
            "‚ö†Ô∏è **Para habilitar os dados de exemplo:**\n\n"
            "1. **Configure o GitHub** no c√≥digo:\n"
            "   - Substitua `GITHUB_USER` pelo seu usu√°rio\n"
            "   - Substitua `GITHUB_REPO` pelo nome do seu reposit√≥rio\n\n"
            "2. **Crie a pasta** `sample_data/` no seu reposit√≥rio\n\n"
            "3. **Fa√ßa upload** dos arquivos Excel de exemplo"
        )
    
    # Instru√ß√µes
    st.markdown("""
    ### üìù Como usar v3.0:
    
    1. **Carregue dados completos** (todo per√≠odo dispon√≠vel)
    
    2. **Selecione as 3 datas**:
       - In√≠cio da otimiza√ß√£o
       - Fim da otimiza√ß√£o  
       - Fim da an√°lise (valida√ß√£o)
    
    3. **Configure** os par√¢metros de otimiza√ß√£o
    
    4. **Otimize** e veja resultados in-sample vs out-of-sample!
    
    ### üí° Novidade v3.0:
    Os dados ficam salvos na sess√£o! Voc√™ pode testar m√∫ltiplos per√≠odos sem recarregar!
    """)

# Rodap√©
st.markdown("---")
st.markdown("*Desenvolvido com Streamlit - Otimizador de Portf√≥lio v3.0* üöÄ")
st.markdown("*Agora com Janelas Temporais para Backtesting Profissional*")
